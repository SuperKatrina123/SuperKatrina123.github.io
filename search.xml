<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo | 初体验之建立个人博客</title>
    <url>/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1><span id="hexo建立个人博客">Hexo建立个人博客</span></h1><h2><span id="准备工作">准备工作</span></h2><ul>
<li>安装Git</li>
<li>安装Node</li>
<li>新建github仓库 仓库名为username.github.io</li>
<li>安装hexo 及初始化</li>
</ul>
<h3><span id="hexo-command">Hexo Command</span></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span>  <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo <span class="literal">-g</span> <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line"></span><br><span class="line">hexo n <span class="string">&#x27;我的文章&#x27;</span> == hexo new <span class="string">&#x27;我的文章&#x27;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo gengerate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server <span class="literal">-s</span> <span class="comment">#静态模式</span></span><br><span class="line">hexo server <span class="literal">-p</span> <span class="number">5000</span> <span class="comment">#更改端口</span></span><br><span class="line">hexo server <span class="literal">-i</span> <span class="number">192.168</span>.<span class="number">1.1</span> <span class="comment">#自定义IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况可以忽略这条命令</span></span><br></pre></td></tr></table></figure>

<h2><span id="新建post">新建post</span></h2><p>按如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new (post name)</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2><span id="推送网站">推送网站</span></h2><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%AF%B4%E6%98%8E1.png" class title="说明1">

<h3><span id="关联hexo和github">关联Hexo和Github</span></h3><p>在blog&#x2F;_config.yml中作如下修改：</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE1.png" class title="配置1">

<h3><span id="保存站点配置文件">保存站点配置文件</span></h3><p>意思是给hexo deploy这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，显然，要部署在github仓库中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>继续输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后在网址栏输入：XXX.github.io 就可以在线上访问个人博客了！</p>
<h3><span id="绑定域名">绑定域名</span></h3><p>没买 直接跳过！</p>
<h2><span id="主题配置">主题配置</span></h2><p><a href="https://hexo.io/zh-cn/docs/themes">https://hexo.io/zh-cn/docs/themes</a></p>
<p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<p>秉承简约风格，我选择了Next主题</p>
<h3><span id="下载主题">下载主题</span></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next<span class="literal">-theme</span>/hexo<span class="literal">-theme-next</span> themes/next</span><br></pre></td></tr></table></figure>

<p>可以看到theme文件夹里面已经有next文件夹了</p>
<h3><span id="相关配置">相关配置</span></h3><p>打开site的配置文件（blog&#x2F;_config.yml）,把theme改为next</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE2.png" class title="配置2">

<p>NexT主题有四个样式可以选择配置：（next&#x2F;_config.yml）</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE3.png" class title="配置3">


<h4><span id="本地查看">本地查看</span></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4><span id="远程配置">远程配置</span></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2><span id="发布文章">发布文章</span></h2><p>文章主要用markdown编写，放置在&#x2F;blog&#x2F;source&#x2F;_posts文件夹下</p>
<h3><span id="预览文章">预览文章</span></h3><p>自带Markdown编辑器或者本地hexo预览</p>
<h2><span id="个性化设置">个性化设置</span></h2><h3><span id="站点配置">站点配置</span></h3><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%B8%AA%E6%80%A7%E5%8C%961.png" class title="个性化1">

<p>标题、副标题、描述、关键词、语言、时区</p>
<h3><span id="主题配置">主题配置</span></h3><p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p>
<h4><span id="设置社交账号">设置社交账号</span></h4><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%B8%AA%E6%80%A7%E5%8C%962.png" class title="个性化2">

<h4><span id="侧边栏配置">侧边栏配置</span></h4><p>把想要的开启即可</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BE%A7%E8%BE%B9%E6%A0%8F1.png" class title="侧边栏1">

<p>文档中有提及：除了Home和archives，其他的页面都需要自己配置，配置流程看</p>
<ul>
<li>Step1：Adding new pages</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ul>
<li>Step2: Setting page type</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2022-07-04 21:00:03</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是tag和categoty的话，需要在文章里面配置就会显示到页面上</li>
</ul>
<h2><span id="踩坑ampamp问题记录">踩坑&amp;&amp;问题记录</span></h2><h3><span id="1-github-和-hexo关联没有关联上">1. github 和 hexo关联没有关联上</span></h3><ul>
<li><p>原因1：注意仓库大小写问题</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_1.png" class title="踩坑1_1">
</li>
<li><p>原因2：配置url</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_3.png" class title="踩坑1_3">

<p>注意这里一定要根据你的仓库来，因为我是直接配置在仓库里的，而我之前手贱错吧SuperKatrina_Blog当成了project name，所以后面样式失效了，控制台查看原因后发现是路径的问题</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_2.png" class title="踩坑1_2"></li>
</ul>
<h3><span id="2-配置主题后本地生效-但是-站点一直没生效">2. 配置主题后本地生效 但是 站点一直没生效</span></h3><ul>
<li><p>解决方法：清除缓存法</p>
<p>依次输入下列命令行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h3><span id="3-图片显示问题">3. 图片显示问题</span></h3><ul>
<li><p>站点_config.yml中，post_asset_folder设置为true，目的是为了新建文章时自动帮我们建一个与文章名相同的文件夹用来从放图片文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">post<span class="emphasis">_asset_</span>folder: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo-asset-image</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-asset-image</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js，内容替换为如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">	<span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.<span class="title function_">shift</span>();</span><br><span class="line">			  src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">			  <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>图片按照如下格式引入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img example.jpg This is an example image %&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2><span id="插件">插件</span></h2><h3><span id="字数统计">字数统计</span></h3><p>根据步骤来</p>
<p><a href="https://github.com/next-theme/hexo-word-counter">https://github.com/next-theme/hexo-word-counter</a></p>
<p>注意（踩坑！！！）：配置完成后必须hexo clean，否则会出现时间为NaN 的情况！</p>
<h3><span id="版权声明_hexo-addlink">版权声明_hexo-addlink</span></h3><p>安装后在站点配置文件中配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 版权信息</span></span><br><span class="line">addlink:</span><br><span class="line">  before<span class="emphasis">_text: 本文作者：XXX，本文地址： # text before the post link</span></span><br><span class="line"><span class="emphasis">  after_</span>text: 转载请注明出处！ # text after the post link</span><br></pre></td></tr></table></figure>

<h3><span id="参考">参考</span></h3><p><a href="https://zhuanlan.zhihu.com/p/26625249%EF%BC%88GitHub+Hexo">https://zhuanlan.zhihu.com/p/26625249（GitHub+Hexo</a> 搭建个人网站详细教程）</p>
<p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> （Hexo中文文档）</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a> （主题配置）</p>
<p><a href="https://theme-next.js.org/%EF%BC%88NexT%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3%EF%BC%89">https://theme-next.js.org/（NexT主题文档）</a></p>
<p><a href="https://github.com/next-theme/hexo-word-counter%EF%BC%88%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6%EF%BC%89">https://github.com/next-theme/hexo-word-counter（字数统计插件）</a></p>
<p><a href="https://juejin.cn/post/7006594302604214280">https://juejin.cn/post/7006594302604214280</a> （图片显示问题）</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo | next主题添加搜索功能</title>
    <url>/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>随着posts增多，考虑增加一个搜索功能（起初是因为看了NexT主题官方有个搜索功能觉得很酷），于是乎有了想法就立马行动起来！</p>
<p>其实搜索next主题的_config.yml文件，next主题已经帮我们写好了搜索功能相关的配置。</p>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD1.png" class title="搜索功能1">

<p>所以打开上图中的github仓库进行相关配置即可。</p>
<h3><span id="step1安装hexo-generator-searchdb">Step1：安装hexo-generator-searchdb</span></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span></span><br></pre></td></tr></table></figure>

<h3><span id="step2在site里的_configxml增加如下配置">Step2：在site里的_config.xml增加如下配置</span></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站点搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<h3><span id="step3把next主题的_configxml的配置打开">Step3：把next主题的_config.xml的配置打开</span></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment"># 这里原本是false 改为true即可</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3><span id="效果">效果</span></h3><ul>
<li>侧边菜单增加了search</li>
</ul>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD2.png" class title="搜索功能2">

<blockquote>
<p>注意：配置好了search功能后侧边菜单会自动更新，不需要去menu那里设置search</p>
</blockquote>
<ul>
<li>可以正常搜索</li>
</ul>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD3.png" class title="搜索功能3">

<h3><span id="参考">参考</span></h3><p><a href="https://github.com/theme-next/hexo-generator-searchdb">https://github.com/theme-next/hexo-generator-searchdb</a></p>
<p><a href="https://blog.csdn.net/weixin_45877759/article/details/107141789">https://blog.csdn.net/weixin_45877759/article/details/107141789</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next个性化</tag>
      </tags>
  </entry>
  <entry>
    <title>函数 | 深刻理解函数名是指向函数的指针</title>
    <url>/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h2><span id="回顾">回顾</span></h2><ul>
<li><p>每一个函数都是Function类型的实例，Function有属性和方法</p>
</li>
<li><p>函数是对象，函数名就是指向函数对象的指针</p>
</li>
<li><p>所有函数对象都会暴露一个只读的name属性，其中包含关于函数的信息</p>
<ul>
<li>情况一：正常情况 &#x3D;&gt; 标识符，或者字符串化的变量名</li>
<li>情况二：函数没有名称 &#x3D;&gt; 空字符串</li>
<li>情况三：构造函数创建 &#x3D;&gt; anonymous</li>
<li>情况四：如果函数是set get 函数或者使用bind实例化 &#x3D;&gt; 前缀 + 函数名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>);                 <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">name</span>);                 <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">name</span>);                 <span class="comment">// baz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">name</span>);          <span class="comment">// (空字符串)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Function</span>()).<span class="property">name</span>);    <span class="comment">// anonymous</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">bind</span>(<span class="literal">null</span>).<span class="property">name</span>);      <span class="comment">// bind foo</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2><span id="函数名是函数指针">函数名是函数指针</span></h2><blockquote>
<p>注意：使用不带括号的函数名会访问函数指针，而不会执行函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherSum = sum;   <span class="comment">// #1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherSum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">//  20</span></span><br><span class="line"></span><br><span class="line">sum = <span class="literal">null</span>;  <span class="comment">// #2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherSum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">//  20</span></span><br></pre></td></tr></table></figure>

<p>以上过程可抽象为下图：</p>
<img src="/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/%E6%8C%87%E9%92%881.png" class title="指针1">

<p>Step1：将sum赋值给anotherSum的时候其实是相当于把指针赋值给anotherSum，于是anotherSum也指向求和函数</p>
<p>Step2：将sum的指针指向null，这并没有改变anotherSum的指针指向，所以并不会影响anotherSum执行</p>
<h2><span id="没有重载">没有重载</span></h2><blockquote>
<p>重载函数：允许在同一范围中声明几个功能类似的同名函数，但是同名函数的签名不同，比如形参类型不同，数量不同等。</p>
</blockquote>
<p><strong>如果在JS中定义两个同名函数会发生什么情况？</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+=<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">100</span>)); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>从打印结果来看，前一个add被后一个add给覆盖了</p>
<p>其实理解了”函数名是函数指针“之后，很容易能够抽象出下图：</p>
<img src="/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/%E6%8C%87%E9%92%882.png" class title="指针2">

<p>当然，函数表达式也是一样的情况，这里不再赘述。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>函数 | 函数声明与函数表达式</title>
    <url>/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2><span id="函数定义">函数定义</span></h2><p>函数通常可以以（1）<strong>函数声明</strong>；（2）<strong>函数表达式</strong> ；（3）<strong>Function构造函数</strong>【不推荐】 三种方式进行定义。</p>
<h3><span id="函数声明">函数声明</span></h3><p>（一般来说，函数声明最后没有分号，因为在代码块的结尾不需要加分号）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"> 	reutrn num1 + num2;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="函数表达式">函数表达式</span></h3><p>（函数表达式实际上是赋值的形式，建议加上分号）</p>
<blockquote>
<p>函数表达式就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName，这样创建的函数叫做匿名函数（未赋值给其他变量的匿名函数的name属性是空字符串）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>函数表达式有几种不同的形式：</p>
<ul>
<li><p>形式一（最常见）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> functionName = <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">	<span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>形式二：一个函数把另一个函数当作值返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComparisonFunction</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">		<span class="keyword">let</span> value1 = object1[propertyName];</span><br><span class="line">		<span class="keyword">let</span> value2 = object2[propertyName];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> value1 + value2;</span><br><span class="line">	&#125;;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>createComparisonFunction()函数返回一个匿名函数，这个匿名函数可以被赋值给一个变量或者直接调用，<strong>任何时候，只要函数被当作值来使用，它就是一个函数表达式</strong></p>
</blockquote>
</li>
</ul>
<h2><span id="函数声明-和-函数表达式的区别">函数声明 和 函数表达式的区别</span></h2><p><strong>两者最主要的区别是：函数声明提前</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg1:函数声明提前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));  <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"> 	reutrn num1 + num2;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg2:函数表达式不提前 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// Uncaught ReferenceError: sum is not defined</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这个报错并不是let引起的，将let改为var也会报错，即使var也会声明提前，但console.log的时候，sum为undefined，所以会引起报错：Uncaught TypeError: sum is not a function</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>红宝书解释如下： JavaScript引擎在任何代码执行之前，会先读取函数声明，并在执行器上下文中生成函数定义，而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。</p>
</blockquote>
<h2><span id="面试题">面试题</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>));           <span class="comment">// 打印结果为13，函数声明提前+函数覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+<span class="number">3</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>原型和原型链 | 理解原型和原型层级</title>
    <url>/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>原型和原型链是JavaScript中很重要的一块知识点，因为实例、构造函数、原型函数之前关系，有时候会被绕晕，遂计划进行一波总结~</p>
</blockquote>
<h2><span id="回顾">回顾</span></h2><ol>
<li><p>只要创建一个函数，就会按照特定的规则为这个函数创建一个<code>prototype</code>属性（指向原型对象）</p>
</li>
<li><p>默认情况下，所有的原型的对象自动获得一个名为<code>constructor</code>的属性，指回与之关联的构造函数</p>
</li>
<li><p>原型对象上包含由构造函数的实例共享的属性和方法</p>
</li>
<li><p>在自定义构造函数时，原型对象默认只会获得<code>constructor</code>属性，其他的所有方法都继承自<code>Object</code></p>
</li>
<li><p>每次调用构造函数创建一个新实例，这个实例内部<code>[[prototype]]</code>指针就会被赋值为构造函数的原型对象，一般我们通过<code>__proto__</code>进行访问对象的原型</p>
</li>
</ol>
<h2><span id="实例-构造函数-原型-三者之间的关系">实例 构造函数 原型 三者之间的关系</span></h2><p>根据之前回顾的知识，若设<code>Person</code>为构造函数，<code>Person.prototype</code>即为原型对象，<code>p=new Person()</code>为构造函数创建的实例，不难可以手绘此图~</p>
<img src="/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/%E5%85%B3%E7%B3%BB%E5%9B%BE1.png" class title="关系图1">

<blockquote>
<p>根据上图，不难理解：<strong>实例与构造函数原型之间有直接的联系，而实例与构造函数之间没有直接联系。</strong></p>
</blockquote>
<h3><span id="1-原型行为">1. 原型行为</span></h3><p>下面根据一个例子来说明三者之间的关系</p>
<h4><span id="1构造函数和原型链循环引用">（1）构造函数和原型链循环引用</span></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据回顾1：只要创建一个函数，就会有原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		constructor: f Person</span></span><br><span class="line"><span class="comment">		[[prototype]]: Object</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据回顾2：默认情况下，所有的原型的对象自动获得一个名为``constructor``的属性，指回与之关联的构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	结合回顾1&amp;&amp;2，不难得到构造函数和原型之间的循环引用关系</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Person &lt;————&gt; Person.prototype</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4><span id="2原型链终止于object原型对象">（2）原型链终止于Object原型对象</span></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	正常的原型链都会终止于Object的原型对象</span></span><br><span class="line"><span class="comment">	Object原型的原型是null</span></span><br><span class="line"><span class="comment">	这个在图中已经展示了，下面通过代码进行验证</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="literal">null</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3><span id="3实例访问原型对象">（3）实例访问原型对象</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	实例通过new构造函数进行创建</span></span><br><span class="line"><span class="comment">	根据回顾5：实例可通过__proto__访问到构造函数的原型</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3><span id="4原型操作方法">（4）原型操作方法</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	instaceof的原理是：检测构造函数的原型是否存在于实例对象的原型链上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	isPrototyeoOf() 用于检测两个对象之间的原型关系</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.getPrototypeOf() 用于获取对象的原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.setPrototypeOf() 用于获取对象的原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(person1, person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) === person);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.setPrototype()会严重影响代码性能，</span></span><br><span class="line"><span class="comment">	[Mozilla在文档里说，在所有浏览器和JavaScript 引擎中，修改继承关系的影响都是微妙且深远的。这种影响并不仅是执行Object.setPrototypeOf()</span></span><br><span class="line"><span class="comment">	语句那么简单，而是会涉及所有访问了那些修改过[[Prototype]]的对象的代码]</span></span><br><span class="line"><span class="comment">	所以可以通过Object.create()来创建一个新对象，同时为其指定原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person2) === person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上述关系均可抽象为下图：</p>
<img src="/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/%E5%85%B3%E7%B3%BB%E5%9B%BE2.png" class title="关系图2">

<h3><span id="2-原型层级">2. 原型层级</span></h3><h3><span id="1对象属性的查找机制">（1）对象属性的查找机制</span></h3><blockquote>
<p><strong>对象属性的查找机制：</strong>在通过对象访问属性时，会按照这个属性的名称开始搜索。搜索开始于对象实例本身。如果在这个实例上发现了给定的名称，则返回该名称对应的值，如果没有找到这个属性，则搜索会沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。如果直接原型中没有找到，就会去原型的原型进行寻找，直到找到<code>Object.prototype</code>的原型，指向<code>null</code>为止。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;y2d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// y2d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br></pre></td></tr></table></figure>

<p>从上面这个例子不难理解<strong>对象属性的查找机制</strong>，在<code>p1</code>对象中含有<code>name</code>属性，打印结果为<code>y2d</code>，而<code>p2</code>对象中不含<code>name</code>属性，就沿着指针去对原型寻找<code>name</code>属性并打印出<code>Katrina</code>，同时也可以说明<strong>如果实例对象有和原型对象相同的属性，实例对象的属性会遮盖住原型对象的属性</strong>，会屏蔽对原型同名属性的访问。</p>
<h3><span id="2方法">（2）方法</span></h3><ul>
<li>delete删除属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;y2d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// y2d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p1.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hasOwnProperty() 方法用于确定某个属性是实例的属性还是原型的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">p1.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;gender&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));    <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>hasOwnProperty() 方法可用于改进for…in枚举对象属性时会枚举原型链上的可枚举属性的缺陷：<a href="https://superkatrina123.github.io/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&&for-of%E7%9A%84%E5%8C%BA%E5%88%AB/">循环语句 | for-in&amp;&amp;for-of的区别</a></p>
<h2><span id="知识补充">知识补充</span></h2><p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写new</a></p>
<p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写instanceof</a></p>
<p>手写Object.create</p>
<h2><span id="参考">参考</span></h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型和原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>变量 | var let const区别及应用</title>
    <url>/2022/07/05/JavaScript/%E5%8F%98%E9%87%8F_var%20let%20const%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2><span id="1-var">1. var</span></h2><h3><span id="1var声明作用域">（1）var声明作用域</span></h3><blockquote>
<p>使用var操作符定义的变量会成为包含它的函数的局部变量，换句话说var声明的变量的作用域是它当前的执行上下文及其闭包</p>
<p>局部变量说明：在函数调用完之后会被销毁</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> message = <span class="string">&#x27;hi&#x27;</span>;   <span class="comment">// message是test函数的局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">//  报错</span></span><br></pre></td></tr></table></figure>

<h3><span id="2var声明提升">（2）var声明提升</span></h3><blockquote>
<p>var声明的变量会自动提升到作用域顶部</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;hi&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2><span id="2-let">2. let</span></h2><h3><span id="1块级作用域">（1）块级作用域</span></h3><blockquote>
<p>let声明的范围是块级作用域，var声明的范围是函数作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">// Matt</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// 26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>

<h3><span id="2不允许重复声明">（2）不允许重复声明</span></h3><blockquote>
<p>let不允许在<strong>同一个块作用域中</strong>出现冗余声明，注意是同一块级作用域！</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age;  <span class="comment">// SyntaxError: 标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>

<h3><span id="3暂时性死区">（3）暂时性死区</span></h3><blockquote>
<p>let声明的变量不会在作用域中提升</p>
<p>暂时性死区：在let声明之前不允许任何方式来引用未声明变量，会抛出错误ReferenceError</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// age不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);   <span class="comment">// ReferenceError:age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">16</span>;</span><br></pre></td></tr></table></figure>

<h3><span id="4全局声明">（4）全局声明</span></h3><blockquote>
<p>let声明的变量不会成为window对象的属性，而var会</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windew.<span class="property">name</span>);   <span class="comment">// Matt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2><span id="3-const">3. const</span></h2><blockquote>
<p>const具有let的以上行为</p>
</blockquote>
<h3><span id="1声明即初始化">（1）声明即初始化</span></h3><blockquote>
<p>const声明变量时必须同时初始化</p>
</blockquote>
<h3><span id="2声明后不允许改变">（2）声明后不允许改变</span></h3><blockquote>
<p>const声明后为常量，不允许改变</p>
</blockquote>
<p>const声明的限制只适用于它指向的变量的引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;  <span class="comment">// 不会报错！</span></span><br></pre></td></tr></table></figure>

<h3><span id="4-面试题">4. 面试题</span></h3><h3><span id="1for循环中的let声明">（1）for循环中的let声明</span></h3><ul>
<li><p>循环泄漏问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// i is undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代变量的奇特声明和修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">	setTimeout(() =&gt; console.log(i), 0);</span><br><span class="line">&#125;;</span><br><span class="line">// 5 5 5 5 5</span><br><span class="line"></span><br><span class="line">for (let i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">	setTimeout(() =&gt; console.log(i), 0);</span><br><span class="line">&#125;;</span><br><span class="line">// 0 1 2 3 4</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript变量</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句 | for-in&amp;&amp;for-of的区别</title>
    <url>/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&amp;&amp;for-of%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2><span id="forof">for…of..</span></h2><p>for…of用于遍历可迭代对象的元素，在可迭代对象上创建一个迭代循环，调用自定义迭代钩子的next()方法来遍历元素，是有序遍历</p>
<h2><span id="forin">for…in..</span></h2><p>for…in用于枚举对象中的属性（包括原型链上的可枚举属性），是无序遍历</p>
<h2><span id="面试题">面试题</span></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);   <span class="comment">// name age gender</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据打印结果可以看到 for...in枚举原型链上的属性，那么如何改进呢？使用hasOwnProperty</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key)   <span class="comment">// name age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript语句</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理 | new操作符</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_new/</url>
    <content><![CDATA[<h3><span id="mdn">MDN</span></h3><blockquote>
<p>new运算符创建一个用户定义的对象类型的实例或者具有构造函数的内置对象的实例</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> constructor[([<span class="variable language_">arguments</span>])]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>constructor</code>：一个指定对象实例的类型的类或函数</p>
<p><code>arguments</code>：一个用于被<code>constructor</code>调用的参数列表</p>
<h3><span id="手写new">手写new</span></h3><p><strong>new关键字会进行如下操作</strong></p>
<ol>
<li>创建一个空对象</li>
<li>为空对象添加<code>__proto__</code>，指向构造函数的<code>prototype</code>对象</li>
<li>将新对象作为<code>this</code>的上下文</li>
<li>如果该函数没有返回对象，则返回<code>this</code></li>
</ol>
<p><strong>对于返回值的说明</strong></p>
<ul>
<li>如果构造函数有返回值且是对象，则返回这个对象</li>
<li>如果构造函数有返回值且不是对象，则返回创建的空对象</li>
<li>如果构造函数没有返回值，返回创建的空对象</li>
</ul>
<p><strong>手写new</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">	<span class="keyword">let</span> constr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>([...<span class="variable language_">arguments</span>]);</span><br><span class="line">    <span class="keyword">let</span> proto = constr.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto);</span><br><span class="line">    <span class="keyword">let</span> res = constr.<span class="title function_">apply</span>(newObj, [...<span class="variable language_">arguments</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> ? res : newObj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Katrina&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);   <span class="comment">// &#123;name: &#x27;Katrina&#x27;, age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Person</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3><span id="知识补充">知识补充</span></h3><p><a href>手写instanceof</a></p>
<p><a href>手写Object.create</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作符 | 逗号操作符</title>
    <url>/2022/07/05/JavaScript/%E6%93%8D%E4%BD%9C%E7%AC%A6_%E9%80%97%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<p>逗号操作符常用场景：</p>
<h3><span id="场景1在一条语句中执行多个操作">场景1：在一条语句中执行多个操作</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3><span id="场景2-辅助赋值">场景2： 辅助赋值</span></h3><blockquote>
<p>在赋值的时候使用逗号操作符分隔值，最终会返回表达式中<strong>最后一个值</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = (<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">0</span>);   <span class="comment">// num的值为0</span></span><br></pre></td></tr></table></figure>

<h3><span id="思考题">思考题</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span>, j &lt; <span class="number">6</span>; i++, j++) &#123;</span><br><span class="line">	<span class="keyword">let</span> k  = i + j;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i, j, k)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	i j k</span></span><br><span class="line"><span class="comment">	0 0 0</span></span><br><span class="line"><span class="comment">	1 1 2</span></span><br><span class="line"><span class="comment">	2 2 4</span></span><br><span class="line"><span class="comment">	3 3 6</span></span><br><span class="line"><span class="comment">	4 4 8</span></span><br><span class="line"><span class="comment">	5 5 10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">6</span>, j &lt; <span class="number">10</span>; i++, j++) &#123;</span><br><span class="line">	<span class="keyword">let</span> k  = i + j;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i, j, k)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    i j k</span></span><br><span class="line"><span class="comment">    0 0 0</span></span><br><span class="line"><span class="comment">    1 1 2</span></span><br><span class="line"><span class="comment">    2 2 4</span></span><br><span class="line"><span class="comment">    3 3 6</span></span><br><span class="line"><span class="comment">    4 4 8</span></span><br><span class="line"><span class="comment">    5 5 10</span></span><br><span class="line"><span class="comment">    6 6 12</span></span><br><span class="line"><span class="comment">    7 7 14</span></span><br><span class="line"><span class="comment">    9 9 18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>为什么会出现这样的情况？</p>
<p>当有多个条件之间用；隔开时，会返回<strong>最右侧</strong>的条件</p>
<p>如果需要两个要求同时满足，应该把；改为&amp;&amp;</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理_Object.create</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_Object.create/</url>
    <content><![CDATA[<h3><span id="mdn-文档">MDN 文档</span></h3><blockquote>
<p>Object.create()方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型。</p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.create(proto);</span><br><span class="line">Object.create(proto, propertiesObject);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<p><code>proto</code>：新建对象的原型对象</p>
<p><code>propertiesObject</code>（可选）：传入对象的可枚举属性将为新创建的对象添加指定的属性值和对应的属性描述符，这些属性对应于<code>Object.defineProperties()</code>的第二个参数</p>
<p><strong>返回值：</strong></p>
<p>一个新对象，带着指定的原型对象及其属性</p>
<h3><span id="手写objectcreate">手写Object.create()</span></h3><p><strong>实现思路：</strong>定义一个空的构造函数，把构造函数的原型指定为传入的对象，利用<code>new</code>构造函数，返回构造函数的实例，达到创建空对象的目的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCreate</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">   	<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === obj);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.myCreate();</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Object</span>.<span class="title function_">myCreate</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">__proto__</span> === obj);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> obj.<span class="property">constructor</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2 <span class="keyword">instanceof</span> obj.<span class="property">constructor</span>);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2><span id="知识补充">知识补充</span></h2><p><a href>手写new</a></p>
<p><a href>手写instanceof</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理_instanceof</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_instanceof/</url>
    <content><![CDATA[<h3><span id="mdn">MDN</span></h3><blockquote>
<p>instanceof 运算符用于检测构造函数的prototype属性是否出现在实例对象的原型链上</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object instancof constructor</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>object</code>：某个实例对象</p>
<p><code>constructor</code>：某个构造函数</p>
<p><strong>返回值</strong></p>
<p>布尔值</p>
<h3><span id="手写实现">手写实现</span></h3><p><strong>实现思路</strong>：根据原型链的思想，判断实例对象的<code>__proto__</code>是否指向构造函数的原型，一级一级向上判断，直至<code>null</code></p>
<p><strong>注意</strong>：instanceof只能用于判断引用数据类型，不能判断基本数据类型，直接返回<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">object, constructor</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> object !== <span class="string">&#x27;object&#x27;</span> || object === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> left = object.<span class="property">__proto__</span>;</span><br><span class="line">	<span class="keyword">let</span> right = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 终止条件1：找到原型了</span></span><br><span class="line">        <span class="keyword">if</span> (left === right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 终止条件2：遍历到了尽头也没找到</span></span><br><span class="line">        <span class="keyword">if</span> (left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 还没找到：继续找呗！</span></span><br><span class="line">        left = left.<span class="property">__proto__</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;KK&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(p, <span class="title class_">Person</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(p, <span class="title class_">Object</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3><span id="知识补充">知识补充</span></h3><p>手写Object.create</p>
<p>手写new</p>
]]></content>
      <categories>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 | AJAX</title>
    <url>/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/</url>
    <content><![CDATA[<h2><span id="ajax概述">AJAX概述</span></h2><p>Ajax &#x3D; Asynchronous JavaScript + XML </p>
<p>Ajax主要依赖于XMLHttpRequest（<strong>XHR</strong>）对象，XHR为发送服务器请求和获取响应提供了合理的接口。这个接口可以实现异步从服务器获取额外数据，意味着用户点击不用页面刷新也可以获取数据。通过XHR对象获取数据后，可以使用DOM方法把数据插入网页。</p>
<h2><span id="ajax优点">AJAX优点</span></h2><p>W3school里面是这么说的</p>
<img src="/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/AJAX%E4%BC%98%E7%82%B9.png" class title="AJAX优点">

<p>言简意赅就是在说AJAX可以不刷新页面更新数据，AJAX可以实现与服务器的通信</p>
<h3><span id="1-无刷新更新数据">1. 无刷新更新数据</span></h3><p>这是AJAX最大的优点：不用刷新整个页面的前提下与服务器通信维护数据，有利于Web应用程序更为迅速地响应用户交互，避免了在网络上发送没有改变的信息，减少用户等待时间，带来了较好的用户体验。</p>
<h3><span id="2-异步与服务器通信">2. 异步与服务器通信</span></h3><p>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间以及降低网络上的数据流量。</p>
<h3><span id="3-前端和后端负载平衡">3. 前端和后端负载平衡</span></h3><p>AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。AJAX的原则是”按需获取数据“，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。</p>
<h3><span id="4-基于标准化被广泛支持">4. 基于标准化被广泛支持</span></h3><p>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许在JavaScript浏览器上执行，随着AJAX的成熟，一些简化AJAX的使用方法的程序库也相继问世。</p>
<h3><span id="5-界面与页面分离">5. 界面与页面分离</span></h3><p>AJAX是的Web中的界面与应用分离，有利于分工合作、减少非技术任意对页面的修改造成的web应用程序错误、提高效率，更加适用于现在的发布系统。</p>
<h3><span id="ajax缺点">AJAX缺点</span></h3><h3><span id="1-ajax破坏了浏览器机制">1. AJAX破坏了浏览器机制</span></h3><p>因为AJAX是动态更新局部页面的，所以用户无法回到前一个页面状态，因为一般来说，浏览器可以通过back和history的功能回到历史记录中的静态页面，但是在AJAX中这是无法实现的。</p>
<h3><span id="2-ajax的安全问题">2. AJAX的安全问题</span></h3><p>AJAX暴露了浏览器与服务器交互的细节。</p>
<h3><span id="3-ajax不能很好地兼容移动设备">3. AJAX不能很好地兼容移动设备</span></h3><p>一些手持设备比如手机，PAD等，现在还不能很好地支持AJAX。</p>
<h2><span id="ajax工作原理">AJAX工作原理</span></h2><img src="/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/AJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" class title="AJAX工作原理">

<p>基于AJAX的介绍和工作原理，AJAX请求可以分为以下几个步骤：</p>
<ol>
<li>新建XHR对象, <code>let xhr = new XMLHttpRequest()</code>；</li>
<li>打开链接 <code>open()</code>，传入三个参数：请求类型，Url，请求是否异步（布尔值）</li>
<li>发送 <code>send()</code>，接收一个参数，作为请求体发出的数据，如果不需要，则必须传<code>null</code></li>
<li>当XHR对象当完成第四步（<code>onreadystatechange</code>）数据接收完成，判断http响应状态（<code>status</code>）200-300之间或者304（缓存）执行回调函数</li>
</ol>
<h3><span id="1-请求类型说明">1. 请求类型说明</span></h3><p>[先占个位~add post后再update]</p>
<h3><span id="2-状态码说明">2. 状态码说明</span></h3><p>状态码详见：[先占个位~add post后再update]</p>
<p>所以，一般来说，HTTP状态码为2xx表示成功，或者是HTTP状态码为304，表示资源未修改过，使用浏览器的缓存中拿取的，也意味着响应有效。</p>
<h3><span id="3-readystate说明">3. readyState说明</span></h3><ul>
<li><strong>0</strong>：未初始化（Uninitialized）。尚未调用open()方法。</li>
<li><strong>1</strong>：已发送（open）。已调用open()方法，但尚未调用send()方法。</li>
<li><strong>2</strong>：已发送（Sent）。已调用send()方法，尚未收到响应。</li>
<li><strong>3</strong>：接受中（Receiving）。已经收到部分响应。</li>
<li><strong>4</strong>：完成（Complete）。已经收到所有响应，可以使用了。</li>
</ul>
<blockquote>
<p>每次readyState的值发生改变的时候，都会触发readystatechange</p>
</blockquote>
<h3><span id="4-xhr对象属性说明">4. xhr对象属性说明</span></h3><blockquote>
<p>收到响应后，xhr对象的以下属性会被填充上数据</p>
</blockquote>
<ul>
<li><code>responseText</code>：作为响应体返回的文本</li>
<li><code>responseXML</code>：如果响应的内容类型是<code>text/xml</code> 或者 <code>application/xml</code>，那就是包含响应数据的XML DOM文件</li>
<li><code>status</code>：响应的HTTP状态</li>
<li><code>statusText</code>：响应的HTTP状态描述</li>
</ul>
<h2><span id="ajax代码实现">AJAX代码实现</span></h2><h3><span id="1-ajax手写">1. AJAX手写</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step1: 新建XHR对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step4: 监听</span></span><br><span class="line">xhr.<span class="property">onreadstatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (readyState === <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;Request was unsucessful!&#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step2: 建立连接</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step3: 发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3><span id="2-promise封装ajax">2. Promise封装AJAX</span></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">method=<span class="string">&#x27;GET&#x27;</span>, url, isAsync=<span class="literal">false</span>, data=<span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        xhr.<span class="property">onreadstatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);   <span class="comment">// 响应体返回的文本</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(xhr.<span class="property">statusText</span>);   <span class="comment">// 响应的HTTP状态描述</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url, isAsync);</span><br><span class="line">        xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="参考">参考</span></h2><p><a href="https://www.w3schools.com/xml/ajax_intro.asp">https://www.w3schools.com/xml/ajax_intro.asp</a></p>
<p><a href="https://juejin.cn/post/6844903713102888973">https://juejin.cn/post/6844903713102888973</a></p>
<p><a href="https://segmentfault.com/a/1190000039416782">https://segmentfault.com/a/1190000039416782</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>手写原理</tag>
        <tag>计算机网络</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
</search>
