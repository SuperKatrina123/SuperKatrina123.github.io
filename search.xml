<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo | next主题添加搜索功能</title>
    <url>/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>随着posts增多，考虑增加一个搜索功能（起初是因为看了NexT主题官方有个搜索功能觉得很酷），于是乎有了想法就立马行动起来！</p>
<p>其实搜索next主题的_config.yml文件，next主题已经帮我们写好了搜索功能相关的配置。</p>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD1.png" class title="搜索功能1">

<p>所以打开上图中的github仓库进行相关配置即可。</p>
<h3 id="step1安装hexo-generator-searchdb"><a href="#Step1：安装hexo-generator-searchdb" class="headerlink" title="Step1：安装hexo-generator-searchdb"></a>Step1：安装hexo-generator-searchdb</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span></span><br></pre></td></tr></table></figure>

<h3 id="step2在site里的_configxml增加如下配置"><a href="#Step2：在site里的-config-xml增加如下配置" class="headerlink" title="Step2：在site里的_config.xml增加如下配置"></a>Step2：在site里的_config.xml增加如下配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站点搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>

<h3 id="step3把next主题的_configxml的配置打开"><a href="#Step3：把next主题的-config-xml的配置打开" class="headerlink" title="Step3：把next主题的_config.xml的配置打开"></a>Step3：把next主题的_config.xml的配置打开</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment"># 这里原本是false 改为true即可</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul>
<li>侧边菜单增加了search</li>
</ul>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD2.png" class title="搜索功能2">

<blockquote>
<p>注意：配置好了search功能后侧边菜单会自动更新，不需要去menu那里设置search</p>
</blockquote>
<ul>
<li>可以正常搜索</li>
</ul>
<img src="/2022/07/06/Hexo/Hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD3.png" class title="搜索功能3">

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/theme-next/hexo-generator-searchdb">https://github.com/theme-next/hexo-generator-searchdb</a></p>
<p><a href="https://blog.csdn.net/weixin_45877759/article/details/107141789">https://blog.csdn.net/weixin_45877759/article/details/107141789</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next个性化</tag>
      </tags>
  </entry>
  <entry>
    <title>函数 | 函数声明与函数表达式</title>
    <url>/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数通常可以以（1）<strong>函数声明</strong>；（2）<strong>函数表达式</strong> ；（3）<strong>Function构造函数</strong>【不推荐】 三种方式进行定义。</p>
<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>（一般来说，函数声明最后没有分号，因为在代码块的结尾不需要加分号）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"> 	reutrn num1 + num2;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>（函数表达式实际上是赋值的形式，建议加上分号）</p>
<blockquote>
<p>函数表达式就像一个普通的变量定义和赋值，即创建一个函数再把它赋值给一个变量functionName，这样创建的函数叫做匿名函数（未赋值给其他变量的匿名函数的name属性是空字符串）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>函数表达式有几种不同的形式：</p>
<ul>
<li><p>形式一（最常见）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> functionName = <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">	<span class="comment">// 函数体</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>形式二：一个函数把另一个函数当作值返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComparisonFunction</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1, object2</span>) &#123;</span><br><span class="line">		<span class="keyword">let</span> value1 = object1[propertyName];</span><br><span class="line">		<span class="keyword">let</span> value2 = object2[propertyName];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> value1 + value2;</span><br><span class="line">	&#125;;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>createComparisonFunction()函数返回一个匿名函数，这个匿名函数可以被赋值给一个变量或者直接调用，<strong>任何时候，只要函数被当作值来使用，它就是一个函数表达式</strong></p>
</blockquote>
</li>
</ul>
<h2 id="函数声明-和-函数表达式的区别"><a href="#函数声明-和-函数表达式的区别" class="headerlink" title="函数声明 和 函数表达式的区别"></a>函数声明 和 函数表达式的区别</h2><p><strong>两者最主要的区别是：函数声明提前</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg1:函数声明提前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));  <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"> 	reutrn num1 + num2;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//eg2:函数表达式不提前 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// Uncaught ReferenceError: sum is not defined</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这个报错并不是let引起的，将let改为var也会报错，即使var也会声明提前，但console.log的时候，sum为undefined，所以会引起报错：Uncaught TypeError: sum is not a function</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>红宝书解释如下： JavaScript引擎在任何代码执行之前，会先读取函数声明，并在执行器上下文中生成函数定义，而函数表达式必须等到代码执行到它那一行，才会在执行上下文中生成函数定义。</p>
</blockquote>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>));           <span class="comment">// 打印结果为13，函数声明提前+函数覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+<span class="number">3</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo | 初体验之建立个人博客</title>
    <url>/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo建立个人博客"><a href="#Hexo建立个人博客" class="headerlink" title="Hexo建立个人博客"></a>Hexo建立个人博客</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>安装Git</li>
<li>安装Node</li>
<li>新建github仓库 仓库名为username.github.io</li>
<li>安装hexo 及初始化</li>
</ul>
<h3 id="hexo-command"><a href="#Hexo-Command" class="headerlink" title="Hexo Command"></a>Hexo Command</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install <span class="literal">-g</span>  <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo <span class="literal">-g</span> <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br><span class="line"></span><br><span class="line">hexo n <span class="string">&#x27;我的文章&#x27;</span> == hexo new <span class="string">&#x27;我的文章&#x27;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo gengerate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server <span class="literal">-s</span> <span class="comment">#静态模式</span></span><br><span class="line">hexo server <span class="literal">-p</span> <span class="number">5000</span> <span class="comment">#更改端口</span></span><br><span class="line">hexo server <span class="literal">-i</span> <span class="number">192.168</span>.<span class="number">1.1</span> <span class="comment">#自定义IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况可以忽略这条命令</span></span><br></pre></td></tr></table></figure>

<h2 id="新建post"><a href="#新建post" class="headerlink" title="新建post"></a>新建post</h2><p>按如下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo new (post name)</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h2><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%AF%B4%E6%98%8E1.png" class title="说明1">

<h3 id="关联hexo和github"><a href="#关联Hexo和Github" class="headerlink" title="关联Hexo和Github"></a>关联Hexo和Github</h3><p>在blog&#x2F;_config.yml中作如下修改：</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE1.png" class title="配置1">

<h3 id="保存站点配置文件"><a href="#保存站点配置文件" class="headerlink" title="保存站点配置文件"></a>保存站点配置文件</h3><p>意思是给hexo deploy这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，显然，要部署在github仓库中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>

<p>继续输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>然后在网址栏输入：XXX.github.io 就可以在线上访问个人博客了！</p>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>没买 直接跳过！</p>
<h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><p><a href="https://hexo.io/zh-cn/docs/themes">https://hexo.io/zh-cn/docs/themes</a></p>
<p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<p>秉承简约风格，我选择了Next主题</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next<span class="literal">-theme</span>/hexo<span class="literal">-theme-next</span> themes/next</span><br></pre></td></tr></table></figure>

<p>可以看到theme文件夹里面已经有next文件夹了</p>
<h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>打开site的配置文件（blog&#x2F;_config.yml）,把theme改为next</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE2.png" class title="配置2">

<p>NexT主题有四个样式可以选择配置：（next&#x2F;_config.yml）</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AE3.png" class title="配置3">


<h4 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>文章主要用markdown编写，放置在&#x2F;blog&#x2F;source&#x2F;_posts文件夹下</p>
<h3 id="预览文章"><a href="#预览文章" class="headerlink" title="预览文章"></a>预览文章</h3><p>自带Markdown编辑器或者本地hexo预览</p>
<h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><h3 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h3><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%B8%AA%E6%80%A7%E5%8C%961.png" class title="个性化1">

<p>标题、副标题、描述、关键词、语言、时区</p>
<h3 id="主题配置"><a href="#主题配置-1" class="headerlink" title="主题配置"></a>主题配置</h3><p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a></p>
<h4 id="设置社交账号"><a href="#设置社交账号" class="headerlink" title="设置社交账号"></a>设置社交账号</h4><img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%B8%AA%E6%80%A7%E5%8C%962.png" class title="个性化2">

<h4 id="侧边栏配置"><a href="#侧边栏配置" class="headerlink" title="侧边栏配置"></a>侧边栏配置</h4><p>把想要的开启即可</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E4%BE%A7%E8%BE%B9%E6%A0%8F1.png" class title="侧边栏1">

<p>文档中有提及：除了Home和archives，其他的页面都需要自己配置，配置流程看</p>
<ul>
<li>Step1：Adding new pages</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ul>
<li>Step2: Setting page type</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tags</span><br><span class="line">date: 2022-07-04 21:00:03</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是tag和categoty的话，需要在文章里面配置就会显示到页面上</li>
</ul>
<h2 id="踩坑ampamp问题记录"><a href="#踩坑-amp-amp-问题记录" class="headerlink" title="踩坑&amp;&amp;问题记录"></a>踩坑&amp;&amp;问题记录</h2><h3 id="1-github-和-hexo关联没有关联上"><a href="#1-github-和-hexo关联没有关联上" class="headerlink" title="1. github 和 hexo关联没有关联上"></a>1. github 和 hexo关联没有关联上</h3><ul>
<li><p>原因1：注意仓库大小写问题</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_1.png" class title="踩坑1_1">
</li>
<li><p>原因2：配置url</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_3.png" class title="踩坑1_3">

<p>注意这里一定要根据你的仓库来，因为我是直接配置在仓库里的，而我之前手贱错吧SuperKatrina_Blog当成了project name，所以后面样式失效了，控制台查看原因后发现是路径的问题</p>
<img src="/2022/07/04/Hexo/Hexo_%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E8%B8%A9%E5%9D%911_2.png" class title="踩坑1_2"></li>
</ul>
<h3 id="2-配置主题后本地生效-但是-站点一直没生效"><a href="#2-配置主题后本地生效-但是-站点一直没生效" class="headerlink" title="2. 配置主题后本地生效 但是 站点一直没生效"></a>2. 配置主题后本地生效 但是 站点一直没生效</h3><ul>
<li><p>解决方法：清除缓存法</p>
<p>依次输入下列命令行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-图片显示问题"><a href="#3-图片显示问题" class="headerlink" title="3. 图片显示问题"></a>3. 图片显示问题</h3><ul>
<li><p>站点_config.yml中，post_asset_folder设置为true，目的是为了新建文章时自动帮我们建一个与文章名相同的文件夹用来从放图片文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">post<span class="emphasis">_asset_</span>folder: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装hexo-asset-image</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-asset-image</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开&#x2F;node_modules&#x2F;hexo-asset-image&#x2F;index.js，内容替换为如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPosition</span>(<span class="params">str, m, i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">split</span>(m, i).<span class="title function_">join</span>(m).<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="title class_">String</span>(hexo.<span class="property">version</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.<span class="property">config</span>;</span><br><span class="line">  <span class="keyword">if</span>(config.<span class="property">post_asset_folder</span>)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.<span class="property">permalink</span>;</span><br><span class="line">	<span class="keyword">if</span>(version.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; <span class="title class_">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = <span class="title function_">getPosition</span>(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.<span class="title function_">substring</span>(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.<span class="title function_">load</span>(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.<span class="title function_">test</span>(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem</span>)&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.<span class="title function_">shift</span>();</span><br><span class="line">			  src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">			  <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.<span class="title function_">html</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>图片按照如下格式引入</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_img example.jpg This is an example image %&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>根据步骤来</p>
<p><a href="https://github.com/next-theme/hexo-word-counter">https://github.com/next-theme/hexo-word-counter</a></p>
<p>注意（踩坑！！！）：配置完成后必须hexo clean，否则会出现时间为NaN 的情况！</p>
<h3 id="版权声明_hexo-addlink"><a href="#版权声明-hexo-addlink" class="headerlink" title="版权声明_hexo-addlink"></a>版权声明_hexo-addlink</h3><p>安装后在站点配置文件中配置</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 版权信息</span></span><br><span class="line">addlink:</span><br><span class="line">  before<span class="emphasis">_text: 本文作者：XXX，本文地址： # text before the post link</span></span><br><span class="line"><span class="emphasis">  after_</span>text: 转载请注明出处！ # text after the post link</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/26625249%EF%BC%88GitHub+Hexo">https://zhuanlan.zhihu.com/p/26625249（GitHub+Hexo</a> 搭建个人网站详细教程）</p>
<p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a> （Hexo中文文档）</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/">https://theme-next.js.org/docs/theme-settings/</a> （主题配置）</p>
<p><a href="https://theme-next.js.org/%EF%BC%88NexT%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3%EF%BC%89">https://theme-next.js.org/（NexT主题文档）</a></p>
<p><a href="https://github.com/next-theme/hexo-word-counter%EF%BC%88%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E6%8F%92%E4%BB%B6%EF%BC%89">https://github.com/next-theme/hexo-word-counter（字数统计插件）</a></p>
<p><a href="https://juejin.cn/post/7006594302604214280">https://juejin.cn/post/7006594302604214280</a> （图片显示问题）</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>原型和原型链 | 理解原型和原型层级</title>
    <url>/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>原型和原型链是JavaScript中很重要的一块知识点，因为实例、构造函数、原型函数之前关系，有时候会被绕晕，遂计划进行一波总结~</p>
</blockquote>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ol>
<li><p>只要创建一个函数，就会按照特定的规则为这个函数创建一个<code>prototype</code>属性（指向原型对象）</p>
</li>
<li><p>默认情况下，所有的原型的对象自动获得一个名为<code>constructor</code>的属性，指回与之关联的构造函数</p>
</li>
<li><p>原型对象上包含由构造函数的实例共享的属性和方法</p>
</li>
<li><p>在自定义构造函数时，原型对象默认只会获得<code>constructor</code>属性，其他的所有方法都继承自<code>Object</code></p>
</li>
<li><p>每次调用构造函数创建一个新实例，这个实例内部<code>[[prototype]]</code>指针就会被赋值为构造函数的原型对象，一般我们通过<code>__proto__</code>进行访问对象的原型</p>
</li>
</ol>
<h2 id="实例-构造函数-原型-三者之间的关系"><a href="#实例-构造函数-原型-三者之间的关系" class="headerlink" title="实例 构造函数 原型 三者之间的关系"></a>实例 构造函数 原型 三者之间的关系</h2><p>根据之前回顾的知识，若设<code>Person</code>为构造函数，<code>Person.prototype</code>即为原型对象，<code>p=new Person()</code>为构造函数创建的实例，不难可以手绘此图~</p>
<img src="/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/%E5%85%B3%E7%B3%BB%E5%9B%BE1.png" class title="关系图1">

<blockquote>
<p>根据上图，不难理解：<strong>实例与构造函数原型之间有直接的联系，而实例与构造函数之间没有直接联系。</strong></p>
</blockquote>
<h3 id="1-原型行为"><a href="#1-原型行为" class="headerlink" title="1. 原型行为"></a>1. 原型行为</h3><p>下面根据一个例子来说明三者之间的关系</p>
<h4 id="1构造函数和原型链循环引用"><a href="#（1）构造函数和原型链循环引用" class="headerlink" title="（1）构造函数和原型链循环引用"></a>（1）构造函数和原型链循环引用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 建立构造函数Person</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据回顾1：只要创建一个函数，就会有原型对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	&#123;</span></span><br><span class="line"><span class="comment">		constructor: f Person</span></span><br><span class="line"><span class="comment">		[[prototype]]: Object</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据回顾2：默认情况下，所有的原型的对象自动获得一个名为``constructor``的属性，指回与之关联的构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	结合回顾1&amp;&amp;2，不难得到构造函数和原型之间的循环引用关系</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	Person &lt;————&gt; Person.prototype</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="2原型链终止于object原型对象"><a href="#（2）原型链终止于Object原型对象" class="headerlink" title="（2）原型链终止于Object原型对象"></a>（2）原型链终止于Object原型对象</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	正常的原型链都会终止于Object的原型对象</span></span><br><span class="line"><span class="comment">	Object原型的原型是null</span></span><br><span class="line"><span class="comment">	这个在图中已经展示了，下面通过代码进行验证</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="literal">null</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="3实例访问原型对象"><a href="#（3）实例访问原型对象" class="headerlink" title="（3）实例访问原型对象"></a>（3）实例访问原型对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	实例通过new构造函数进行创建</span></span><br><span class="line"><span class="comment">	根据回顾5：实例可通过__proto__访问到构造函数的原型</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="4原型操作方法"><a href="#（4）原型操作方法" class="headerlink" title="（4）原型操作方法"></a>（4）原型操作方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	instaceof的原理是：检测构造函数的原型是否存在于实例对象的原型链上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	isPrototyeoOf() 用于检测两个对象之间的原型关系</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person1));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.getPrototypeOf() 用于获取对象的原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.setPrototypeOf() 用于获取对象的原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(person1, person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1) === person);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Object.setPrototype()会严重影响代码性能，</span></span><br><span class="line"><span class="comment">	[Mozilla在文档里说，在所有浏览器和JavaScript 引擎中，修改继承关系的影响都是微妙且深远的。这种影响并不仅是执行Object.setPrototypeOf()</span></span><br><span class="line"><span class="comment">	语句那么简单，而是会涉及所有访问了那些修改过[[Prototype]]的对象的代码]</span></span><br><span class="line"><span class="comment">	所以可以通过Object.create()来创建一个新对象，同时为其指定原型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person2) === person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上述关系均可抽象为下图：</p>
<img src="/2022/07/06/JavaScript/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE_%E7%90%86%E8%A7%A3%E5%8E%9F%E5%9E%8B/%E5%85%B3%E7%B3%BB%E5%9B%BE2.png" class title="关系图2">

<h3 id="2-原型层级"><a href="#2-原型层级" class="headerlink" title="2. 原型层级"></a>2. 原型层级</h3><h3 id="1对象属性的查找机制"><a href="#（1）对象属性的查找机制" class="headerlink" title="（1）对象属性的查找机制"></a>（1）对象属性的查找机制</h3><blockquote>
<p><strong>对象属性的查找机制：</strong>在通过对象访问属性时，会按照这个属性的名称开始搜索。搜索开始于对象实例本身。如果在这个实例上发现了给定的名称，则返回该名称对应的值，如果没有找到这个属性，则搜索会沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。如果直接原型中没有找到，就会去原型的原型进行寻找，直到找到<code>Object.prototype</code>的原型，指向<code>null</code>为止。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;y2d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// y2d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br></pre></td></tr></table></figure>

<p>从上面这个例子不难理解<strong>对象属性的查找机制</strong>，在<code>p1</code>对象中含有<code>name</code>属性，打印结果为<code>y2d</code>，而<code>p2</code>对象中不含<code>name</code>属性，就沿着指针去对原型寻找<code>name</code>属性并打印出<code>Katrina</code>，同时也可以说明<strong>如果实例对象有和原型对象相同的属性，实例对象的属性会遮盖住原型对象的属性</strong>，会屏蔽对原型同名属性的访问。</p>
<h3 id="2方法"><a href="#（2）方法" class="headerlink" title="（2）方法"></a>（2）方法</h3><ul>
<li>delete删除属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;y2d&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// y2d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p1.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>);  <span class="comment">// Katrina</span></span><br></pre></td></tr></table></figure>

<ul>
<li>hasOwnProperty() 方法用于确定某个属性是实例的属性还是原型的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Katrina&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">p1.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;gender&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));    <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>hasOwnProperty() 方法可用于改进for…in枚举对象属性时会枚举原型链上的可枚举属性的缺陷：<a href="https://superkatrina123.github.io/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&&for-of%E7%9A%84%E5%8C%BA%E5%88%AB/">循环语句 | for-in&amp;&amp;for-of的区别</a></p>
<h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写new</a></p>
<p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写instanceof</a></p>
<p>手写Object.create</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      <categories>
        <category>JavaScript</category>
        <category>和我一起读红宝书</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型和原型链</tag>
        <tag>和我一起读红宝书</tag>
      </tags>
  </entry>
  <entry>
    <title>函数 | 深刻理解函数名是指向函数的指针</title>
    <url>/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ul>
<li><p>每一个函数都是Function类型的实例，Function有属性和方法</p>
</li>
<li><p>函数是对象，函数名就是指向函数对象的指针</p>
</li>
<li><p>所有函数对象都会暴露一个只读的name属性，其中包含关于函数的信息</p>
<ul>
<li>情况一：正常情况 &#x3D;&gt; 标识符，或者字符串化的变量名</li>
<li>情况二：函数没有名称 &#x3D;&gt; 空字符串</li>
<li>情况三：构造函数创建 &#x3D;&gt; anonymous</li>
<li>情况四：如果函数是set get 函数或者使用bind实例化 &#x3D;&gt; 前缀 + 函数名</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>);                 <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">name</span>);                 <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">name</span>);                 <span class="comment">// baz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">name</span>);          <span class="comment">// (空字符串)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Function</span>()).<span class="property">name</span>);    <span class="comment">// anonymous</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">bind</span>(<span class="literal">null</span>).<span class="property">name</span>);      <span class="comment">// bind foo</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="函数名是函数指针"><a href="#函数名是函数指针" class="headerlink" title="函数名是函数指针"></a>函数名是函数指针</h2><blockquote>
<p>注意：使用不带括号的函数名会访问函数指针，而不会执行函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherSum = sum;   <span class="comment">// #1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherSum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">//  20</span></span><br><span class="line"></span><br><span class="line">sum = <span class="literal">null</span>;  <span class="comment">// #2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherSum</span>(<span class="number">10</span>, <span class="number">10</span>));   <span class="comment">//  20</span></span><br></pre></td></tr></table></figure>

<p>以上过程可抽象为下图：</p>
<img src="/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/%E6%8C%87%E9%92%881.png" class title="指针1">

<p>Step1：将sum赋值给anotherSum的时候其实是相当于把指针赋值给anotherSum，于是anotherSum也指向求和函数</p>
<p>Step2：将sum的指针指向null，这并没有改变anotherSum的指针指向，所以并不会影响anotherSum执行</p>
<h2 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h2><blockquote>
<p>重载函数：允许在同一范围中声明几个功能类似的同名函数，但是同名函数的签名不同，比如形参类型不同，数量不同等。</p>
</blockquote>
<p><strong>如果在JS中定义两个同名函数会发生什么情况？</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num += <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num+=<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">100</span>)); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>从打印结果来看，前一个add被后一个add给覆盖了</p>
<p>其实理解了”函数名是函数指针“之后，很容易能够抽象出下图：</p>
<img src="/2022/07/05/JavaScript/%E5%87%BD%E6%95%B0_%E6%B7%B1%E5%88%BB%E7%90%86%E8%A7%A3%E5%87%BD%E6%95%B0%E5%90%8D%E6%98%AF%E6%8C%87%E5%90%91%E5%87%BD%E6%95%B0%E7%9A%84%E6%8C%87%E9%92%88/%E6%8C%87%E9%92%882.png" class title="指针2">

<p>当然，函数表达式也是一样的情况，这里不再赘述。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript函数</tag>
      </tags>
  </entry>
  <entry>
    <title>变量 | var let const区别及应用</title>
    <url>/2022/07/05/JavaScript/%E5%8F%98%E9%87%8F_var%20let%20const%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="1-var"><a href="#1-var" class="headerlink" title="1. var"></a>1. var</h2><h3 id="1var声明作用域"><a href="#（1）var声明作用域" class="headerlink" title="（1）var声明作用域"></a>（1）var声明作用域</h3><blockquote>
<p>使用var操作符定义的变量会成为包含它的函数的局部变量，换句话说var声明的变量的作用域是它当前的执行上下文及其闭包</p>
<p>局部变量说明：在函数调用完之后会被销毁</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> message = <span class="string">&#x27;hi&#x27;</span>;   <span class="comment">// message是test函数的局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">//  报错</span></span><br></pre></td></tr></table></figure>

<h3 id="2var声明提升"><a href="#（2）var声明提升" class="headerlink" title="（2）var声明提升"></a>（2）var声明提升</h3><blockquote>
<p>var声明的变量会自动提升到作用域顶部</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;hi&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-let"><a href="#2-let" class="headerlink" title="2. let"></a>2. let</h2><h3 id="1块级作用域"><a href="#（1）块级作用域" class="headerlink" title="（1）块级作用域"></a>（1）块级作用域</h3><blockquote>
<p>let声明的范围是块级作用域，var声明的范围是函数作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">// Matt</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// 26</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure>

<h3 id="2不允许重复声明"><a href="#（2）不允许重复声明" class="headerlink" title="（2）不允许重复声明"></a>（2）不允许重复声明</h3><blockquote>
<p>let不允许在<strong>同一个块作用域中</strong>出现冗余声明，注意是同一块级作用域！</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="keyword">let</span> age;  <span class="comment">// SyntaxError: 标识符age已经声明过了</span></span><br></pre></td></tr></table></figure>

<h3 id="3暂时性死区"><a href="#（3）暂时性死区" class="headerlink" title="（3）暂时性死区"></a>（3）暂时性死区</h3><blockquote>
<p>let声明的变量不会在作用域中提升</p>
<p>暂时性死区：在let声明之前不允许任何方式来引用未声明变量，会抛出错误ReferenceError</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// name会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);   <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// age不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);   <span class="comment">// ReferenceError:age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">16</span>;</span><br></pre></td></tr></table></figure>

<h3 id="4全局声明"><a href="#（4）全局声明" class="headerlink" title="（4）全局声明"></a>（4）全局声明</h3><blockquote>
<p>let声明的变量不会成为window对象的属性，而var会</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(windew.<span class="property">name</span>);   <span class="comment">// Matt </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="3-const"><a href="#3-const" class="headerlink" title="3. const"></a>3. const</h2><blockquote>
<p>const具有let的以上行为</p>
</blockquote>
<h3 id="1声明即初始化"><a href="#（1）声明即初始化" class="headerlink" title="（1）声明即初始化"></a>（1）声明即初始化</h3><blockquote>
<p>const声明变量时必须同时初始化</p>
</blockquote>
<h3 id="2声明后不允许改变"><a href="#（2）声明后不允许改变" class="headerlink" title="（2）声明后不允许改变"></a>（2）声明后不允许改变</h3><blockquote>
<p>const声明后为常量，不允许改变</p>
</blockquote>
<p>const声明的限制只适用于它指向的变量的引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;  <span class="comment">// 不会报错！</span></span><br></pre></td></tr></table></figure>

<h3 id="4-面试题"><a href="#4-面试题" class="headerlink" title="4. 面试题"></a>4. 面试题</h3><h3 id="1for循环中的let声明"><a href="#（1）for循环中的let声明" class="headerlink" title="（1）for循环中的let声明"></a>（1）for循环中的let声明</h3><ul>
<li><p>循环泄漏问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="comment">// 循环逻辑</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// i is undefined</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代变量的奇特声明和修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">	setTimeout(() =&gt; console.log(i), 0);</span><br><span class="line">&#125;;</span><br><span class="line">// 5 5 5 5 5</span><br><span class="line"></span><br><span class="line">for (let i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">	setTimeout(() =&gt; console.log(i), 0);</span><br><span class="line">&#125;;</span><br><span class="line">// 0 1 2 3 4</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>常见方法对比</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript变量</tag>
        <tag>ES6</tag>
        <tag>常见方法对比</tag>
      </tags>
  </entry>
  <entry>
    <title>对象 | Object_API</title>
    <url>/2022/07/06/JavaScript/%E5%AF%B9%E8%B1%A1_Object_API/</url>
    <content><![CDATA[<blockquote>
<p>Object的API众多且重要，按照Object原型方法、进行分类</p>
</blockquote>
<h3 id="object原型方法所有实例共享"><a href="#Object原型方法（所有实例共享）" class="headerlink" title="Object原型方法（所有实例共享）"></a>Object原型方法（所有实例共享）</h3><blockquote>
<p>以下方法来自于Object.prototype，参考《红宝书》P56</p>
</blockquote>
<h4 id="1constructor"><a href="#（1）constructor" class="headerlink" title="（1）constructor"></a>（1）constructor</h4><p>用于创建当前对象的函数</p>
<h4 id="2hasownpropertypropertyname"><a href="#（2）hasOwnProperty-propertyName" class="headerlink" title="（2）hasOwnProperty(propertyName)"></a>（2）hasOwnProperty(propertyName)</h4><p>用于判断当前对象实例（不是原型）上是否存在给定的属性，要检查的属性名必须是字符串（如<code>obj.hasOwnProperty(&quot;name&quot;)</code>）或&#96;&#96;&#96;Symbol&#96;&#96;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="3isprototypeofobject"><a href="#（3）isPrototypeOf-object" class="headerlink" title="（3）isPrototypeOf(object)"></a>（3）isPrototypeOf(object)</h4><p>用于判断当前对象是否为另一个对象的原型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">isPrototypeOf</span>(p));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="4propertyisenumerablepropertyname"><a href="#（4）propertyIsEnumerable-propertyName" class="headerlink" title="（4）propertyIsEnumerable(propertyName)"></a>（4）propertyIsEnumerable(propertyName)</h4><p>用于判断给定的属性是否可以使用for-in 语句枚举，属性名必须是字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">	<span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">	<span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;age&#x27;</span>));   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="5tolocalestring"><a href="#（5）toLocaleString" class="headerlink" title="（5）toLocaleString()"></a>（5）toLocaleString()</h4><p>返回对象的字符串表示，该字符串反映对象所在的本地化执行环境</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">toLocaleString</span>();  <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="6tostring"><a href="#（6）toString" class="headerlink" title="（6）toString()"></a>（6）toString()</h4><p>返回对象的字符串表示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">toString</span>();  <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-valueof"><a href="#（7）-valueOf" class="headerlink" title="（7） valueOf()"></a>（7） valueOf()</h4><p>返回对象对应的字符串、数值或布尔值表示，通常与toString()的返回值相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">valueOf</span>());   <span class="comment">// &#123;name: Katrina, age: 18&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="设置原型方法"><a href="#设置原型方法" class="headerlink" title="设置原型方法"></a>设置原型方法</h3><h4 id="1objectcreate-es5"><a href="#（1）Object-create-【ES5】" class="headerlink" title="（1）Object.create()  【ES5】"></a>（1）Object.create()  【ES5】</h4><blockquote>
<p><code>Object.create()</code>用于创建一个新对象，使用现有的对象来作为新创建对象的原型。</p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.create(proto);</span><br><span class="line">Object.create(proto, propertiesObject);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<p><code>proto</code>：新建对象的原型对象</p>
<p><code>propertiesObject</code>（可选）：传入对象的可枚举属性将为新创建的对象添加指定的属性值和对应的属性描述符，这些属性对应于<code>Object.defineProperties()</code>的第二个参数</p>
<p><strong>返回值：</strong></p>
<p>一个新对象，带着指定的原型对象及其属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">isPrototypeOf</span>(p));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="2objectsetprototypeofobj-prototype-es6"><a href="#（2）Object-setPrototypeOf-obj-prototype-【ES6】" class="headerlink" title="（2）Object.setPrototypeOf(obj, prototype)   【ES6】"></a>（2）Object.setPrototypeOf(obj, prototype)   【ES6】</h4><blockquote>
<p><code>Object.setPrototypeOf()</code>方法设置一个指定的对象的原型 ( 即，内部 [[Prototype]] 属性）到另一个对象或  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a></p>
</blockquote>
<p><strong>语法如下</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, prototype)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><p>obj</p>
<p>要设置其原型的对象。</p>
</li>
<li><p>prototype</p>
<p>该对象的新原型 (一个对象 或 null）</p>
</li>
</ul>
<blockquote>
<p><strong>警告：</strong>由于现代 JavaScript 引擎优化属性访问所带来的特性的关系，更改对象的 <code>[[Prototype]]</code> 在<em><strong>各个</strong></em>浏览器和 JavaScript 引擎上都是一个很慢的操作。其在更改继承的性能上的影响是微妙而又广泛的，这不仅仅限于 <code>obj.__proto__ = ...</code> 语句上的时间花费，而且可能会延伸到<em><strong>任何</strong></em>代码，那些可以访问<em><strong>任何</strong></em> <code>[[Prototype]]</code> 已被更改的对象的代码。如果你关心性能，你应该避免设置一个对象的 <code>[[Prototype]]</code>。相反，你应该使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create()</code></a> 来创建带有你想要的 <code>[[Prototype]]</code> 的新对象。</p>
</blockquote>
<h3 id="object属性方法"><a href="#Object属性方法" class="headerlink" title="Object属性方法"></a>Object属性方法</h3><p>自觉补课：<a href="https://superkatrina123.github.io/2022/07/06/JavaScript/%E5%AF%B9%E8%B1%A1_%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B/">Object属性类型</a></p>
<h4 id="1定义属性objectdefineproperty-es5-ampamp-objectdefineproperties-es5"><a href="#（1）定义属性：Object-defineProperty-【ES5】-amp-amp-Object-defineProperties-【ES5】" class="headerlink" title="（1）定义属性：Object.defineProperty()  【ES5】    &amp;&amp;    Object.defineProperties()    【ES5】"></a>（1）定义属性：Object.defineProperty()  【ES5】    &amp;&amp;    Object.defineProperties()    【ES5】</h4><blockquote>
<p>两者的区别在于前者单个定义，后者多个定义</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor);</span><br><span class="line"></span><br><span class="line">- <span class="attr">obj</span>: 要定义属性的对象</span><br><span class="line">- <span class="attr">prop</span>: 要定义或修改的属性的名称或<span class="title class_">Symbol</span></span><br><span class="line">- <span class="attr">descriptor</span>: 要定义或修改的属性描述符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,props);</span><br><span class="line">- <span class="attr">obj</span>: 要定义属性的对象</span><br><span class="line">- <span class="attr">props</span>: 要定义其可枚举属性或者修改的属性描述符的对象</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty(obj, prop, descriptor);</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperties(obj,props);</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    	<span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="2获取属性的特性objectgetownpropertydescriptor-es5-ampamp-objectgetownpropertydescriptors-es8"><a href="#（2）获取属性的特性：Object-getOwnPropertyDescriptor-【ES5】-amp-amp-Object-getOwnPropertyDescriptors-【ES8】" class="headerlink" title="（2）获取属性的特性：Object.getOwnPropertyDescriptor()   【ES5】  &amp;&amp; Object.getOwnPropertyDescriptors()   【ES8】"></a>（2）获取属性的特性：Object.getOwnPropertyDescriptor()   【ES5】  &amp;&amp; Object.getOwnPropertyDescriptors()   【ES8】</h4><blockquote>
<p>可以取得指定属性的属性描述符</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, prop);</span><br><span class="line"></span><br><span class="line">- <span class="attr">obj</span>:目标对象</span><br><span class="line">- <span class="attr">prop</span>:目标对象内的属性</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line">- <span class="attr">obj</span>:目标对象</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(person, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    	<span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(person, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor); <span class="comment">// &#123;value: &#x27;Katrina&#x27;, writable: false, enumerable: false, configurable: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">writable</span>);   <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">enumerable</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="3获取属性名-objectgetownpropertynames-es5-ampamp-objectgetownpropertysymbols-es6"><a href="#（3）获取属性名：-Object-getOwnPropertyNames-【ES5】-amp-amp-Object-getOwnPropertySymbols-【ES6】" class="headerlink" title="（3）获取属性名： Object.getOwnPropertyNames()   【ES5】 &amp;&amp; Object.getOwnPropertySymbols()    【ES6】"></a>（3）获取属性名： Object.getOwnPropertyNames()   【ES5】 &amp;&amp; Object.getOwnPropertySymbols()    【ES6】</h4><blockquote>
<p><code>Object.getOwnPropertyNames()</code>返回一个由指定对象的<strong>所有自身属性的属性名****（包括不可枚举属性但不包括 Symbol 值作为名称的属性）</strong>组成的数组</p>
<p><code>Object.getOwnPropertySymbols()</code>返回一个给定对象自身的所有 Symbol 属性的数组</p>
<p>返回值都是数组，注意限定条件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.getOwnPropertyNames()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(arr).<span class="title function_">sort</span>()); <span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getOwnPropertySymbols()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">&quot;localSymbol&quot;</span>;</span><br><span class="line">obj[b] = <span class="string">&quot;globalSymbol&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSymbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols)         <span class="comment">// [Symbol(a), Symbol(b)]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objectSymbols[<span class="number">0</span>])      <span class="comment">// Symbol(a)</span></span><br></pre></td></tr></table></figure>

<h4 id="4对象不可扩展-objectpreventextensions-ampamp-objectseal-ampamp-objectfreeze-es5all"><a href="#（4）对象不可扩展：-Object-preventExtensions-amp-amp-Object-seal-amp-amp-Object-freeze-【ES5】ALL" class="headerlink" title="（4）对象不可扩展： Object.preventExtensions()   &amp;&amp; Object.seal()  &amp;&amp; Object.freeze()    【ES5】ALL"></a>（4）对象不可扩展： Object.preventExtensions()   &amp;&amp; Object.seal()  &amp;&amp; Object.freeze()    【ES5】ALL</h4><blockquote>
<p><code>Object.preventExtensions(obj)</code>方法让一个对象变的不可扩展，也就是永远不能再添加新的属性，原有的属性可以修改和删除  【阻止】</p>
<p><code>Object.seal(obj)</code>方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置，当前属性的值只要原来是可写的就可以改变，即不允许删除和添加，能不能修改根据writable属性决定 【封闭】</p>
<p><code>Object.freeze(obj)</code>方法可以<strong>冻结</strong>一个对象，一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值，啥也干不了呗~ 【冻结】</p>
<p>【根据中文含义，锁定深度是层层递进的~】</p>
</blockquote>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.preventExtensions(obj)</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">4</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj);</span><br><span class="line">obj === obj2;  <span class="comment">// true</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">obj.<span class="property">c</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">obj.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// a, undefined, 3, d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// undefined, undefined, 3, d</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">obj.<span class="property">c</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">obj.<span class="property">d</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// undefined, undefined, c, d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.seal()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">4</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">seal</span>(obj);</span><br><span class="line">obj === obj2;  <span class="comment">// true</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">obj.<span class="property">c</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">obj.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// a, undefined, 3, d</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// a, undefined, 3, d</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">true</span>&#125;); <span class="comment">// TypeError</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;); <span class="comment">// TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.freeze()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">4</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">obj === obj2;  <span class="comment">// true</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">obj.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line">obj.<span class="property">c</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">obj.<span class="property">d</span> = <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// a, undefined, 3, 4</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>, obj.<span class="property">b</span>, obj.<span class="property">c</span>, obj.<span class="property">d</span>); <span class="comment">// a, undefined, 3, 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">true</span>&#125;); <span class="comment">// TypeError</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;d&#x27;</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure>

<h4 id="5对象是否可扩展-是否被冻结-是否被封锁objectisextensible-objectisfrozen-objectissealed-es5all"><a href="#（5）对象是否可扩展-是否被冻结-是否被封锁：Object-isExtensible-Object-isFrozen-Object-isSealed-【ES5】ALL" class="headerlink" title="（5）对象是否可扩展 是否被冻结 是否被封锁：Object.isExtensible()    Object.isFrozen()   Object.isSealed()    【ES5】ALL"></a>（5）对象是否可扩展 是否被冻结 是否被封锁：Object.isExtensible()    Object.isFrozen()   Object.isSealed()    【ES5】ALL</h4><blockquote>
<p><code>Object.isExtensible</code>判断一个对象是否是可扩展的（是否可以添加新的属性）</p>
<p><code>Object.isFrozen()</code>方法判断一个对象是否被冻结</p>
<p><code>Object.isSealed()</code>判断一个对象是否被密封</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)  <span class="comment">// 返回布尔值</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)   <span class="comment">// 返回布尔值</span></span><br></pre></td></tr></table></figure>

<p>默认情况下，对象是可扩展的：即可以为他们添加新的属性。以及它们的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto"><code>__proto__</code></a>Deprecated 属性可以被更改。<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions"><code>Object.preventExtensions</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal"><code>Object.seal</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"><code>Object.freeze</code></a> 方法都可以标记一个对象为不可扩展（non-extensible）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/ 新对象默认是可扩展的。</span><br><span class="line"><span class="keyword">var</span> empty = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(empty); <span class="comment">// === true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...可以变的不可扩展。</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(empty);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(empty); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 密封对象是不可扩展的。</span></span><br><span class="line"><span class="keyword">var</span> sealed = <span class="title class_">Object</span>.<span class="title function_">seal</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(sealed); <span class="comment">// === false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 冻结对象也是不可扩展。</span></span><br><span class="line"><span class="keyword">var</span> frozen = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(frozen); <span class="comment">// === false</span></span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1枚举方法-objectentries-es8-ampamp-objectkeys-es5-ampamp-objectvalues-es8"><a href="#（1）枚举方法：-Object-entries-【ES8】-amp-amp-Object-keys-【ES5】-amp-amp-Object-values-【ES8】" class="headerlink" title="（1）枚举方法： Object.entries()   【ES8】  &amp;&amp;  Object.keys()   【ES5】  &amp;&amp; Object.values()   【ES8】"></a>（1）枚举方法： Object.entries()   【ES8】  &amp;&amp;  Object.keys()   【ES5】  &amp;&amp; Object.values()   【ES8】</h4><blockquote>
<p><code>Object.entries()</code>方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）</p>
<p><code>Object.keys()</code> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</p>
<p><code>Object.values()</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a>循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )</p>
<p>返回值都是数组</p>
</blockquote>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object.entries()</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [ [&#x27;foo&#x27;, &#x27;bar&#x27;], [&#x27;baz&#x27;, 42] ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys()</span></span><br><span class="line"><span class="keyword">var</span> anObj = &#123; <span class="number">100</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(anObj)); <span class="comment">// console: [&#x27;2&#x27;, &#x27;7&#x27;, &#x27;100&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.values()</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)); <span class="comment">// [&#x27;bar&#x27;, 42]</span></span><br></pre></td></tr></table></figure>

<h4 id="2合并对象objectassign-es6"><a href="#（2）合并对象：Object-assign-【ES6】" class="headerlink" title="（2）合并对象：Object.assign()   【ES6】"></a>（2）合并对象：Object.assign()   【ES6】</h4><blockquote>
<p><code>Object.assign()</code> 方法将所有<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable">可枚举</a>（<code>Object.propertyIsEnumerable()</code> 返回 true）和自有（<code>Object.hasOwnProperty()</code> 返回 true）属性从一个或多个源对象复制到目标对象，返回修改后的对象</p>
</blockquote>
<p><strong>语法如下</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources);</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><p>target：目标对象，接收源对象属性的对象，也是修改后的返回值</p>
</li>
<li><p>sources：源对象，包含将被合并的属性</p>
</li>
</ul>
<p>举例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = &#123;<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> p2 = &#123;<span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="title class_">Object</span>.<span class="title function_">assign</span>(p1, p2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);   <span class="comment">// &#123;name: &#x27;Katrina&#x27;, age: 18&#125;;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);   <span class="comment">// &#123;name: &#x27;Katrina&#x27;, age: 18&#125;;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Object.assign()会改变目标对象</p>
</li>
<li><p>Object.assign()只复制属性值，是一种浅拷贝</p>
</li>
<li><p>Object.assign()会覆盖从后向前覆盖相同属性</p>
</li>
</ul>
<h4 id="3比较方法-objectis-es6"><a href="#（3）比较方法：-Object-is-【ES6】" class="headerlink" title="（3）比较方法： Object.is()    【ES6】"></a>（3）比较方法： Object.is()    【ES6】</h4><blockquote>
<p><code>Object.is(value1, value2)</code>判断两个值是否为同一个值</p>
</blockquote>
<p>相较于<code>===</code>（严格相等），Object.is对两种情况做了改变：</p>
<ol>
<li><code>Object.is(NaN, NaN) ;   // true</code></li>
<li><code>Object.is(-0, +0);   // true</code></li>
</ol>
<p>其余和<code>===</code>一样</p>
<p>补充：<a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写Object.is</a></p>
<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/06/JavaScript/%E5%AF%B9%E8%B1%A1_%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B/">对象 | 对象属性的类型</a></p>
<p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">手写Object.is</a></p>
<p><a href="%E5%8D%A0%E4%B8%AA%E4%BD%8D">深浅拷贝</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_Object.create/">手写原理| Object.create</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&&for-of%E7%9A%84%E5%8C%BA%E5%88%AB/">循环语句 | for-in&amp;&amp;for-of的区别</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://segmentfault.com/a/1190000010753942">JavaScript 对象所有API解析</a></p>
<p><a href="jianshu.com/p/b3eb24570c74">Object.preventExtensions()、Object.seal()、Object.freeze() 的区别</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">MDN Object</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>和我一起做总结</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
        <tag>JavaScript对象</tag>
        <tag>和我一起做总结</tag>
      </tags>
  </entry>
  <entry>
    <title>对象 | 对象属性的类型</title>
    <url>/2022/07/06/JavaScript/%E5%AF%B9%E8%B1%A1_%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>ECMA-262 使用一些内部特性来描述属性的特征。这些特性是由为JavaScript 实现引擎的规范定义的。因此，开发者不能在JavaScript 中直接访问这些特性。为了将某个特性标识为内部特性，规范会用两个中括号把特性的名称括起来，比如[[Enumerable]]。</p>
<p>属性分为两种：<strong>数据属性</strong>和<strong>访问属性</strong></p>
</blockquote>
<h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><h4 id="1configurable"><a href="#（1）-Configurable" class="headerlink" title="（1）[[Configurable]]"></a>（1）[[Configurable]]</h4><blockquote>
<p>表示属性<strong>是否可以通过delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性</strong></p>
<p>默认情况下，所有直接定义在对象上的属性的这个特性都是true</p>
</blockquote>
<p>注意：一个属性被定义为不可配置（即）<code>configurable=false</code>后，就不能再变回之前的可配置了<code>configurable=true</code></p>
<h4 id="2enumerable"><a href="#（2）-Enumerable" class="headerlink" title="（2）[[Enumerable]]"></a>（2）[[Enumerable]]</h4><blockquote>
<p>表示属性<strong>是否可以通过for-in 循环返回</strong>（心里默念：for…in用于遍历对象上可枚举属性，包括原型上的可枚举属性，巴拉巴拉~）</p>
<p>默认情况下，所有直接定义在对象上的属性的这个特性都是true</p>
</blockquote>
<h4 id="3writable"><a href="#（3）-Writable" class="headerlink" title="（3）[[Writable]]"></a>（3）[[Writable]]</h4><blockquote>
<p>表示属性的<strong>值是否可以被修改</strong></p>
<p>默认情况下，所有直接定义在对象上的属性的这个特性都是true</p>
</blockquote>
<h4 id="4value"><a href="#（4）-Value" class="headerlink" title="（4）[[Value]]"></a>（4）[[Value]]</h4><blockquote>
<p>包含属性实际的值</p>
<p>这个特性的默认值为undefined</p>
</blockquote>
<h4 id="数据属性总结与应用"><a href="#数据属性总结与应用" class="headerlink" title="数据属性总结与应用"></a>数据属性总结与应用</h4><ol>
<li><p>将属性显式添加到对象之后，<code>[[Configurable]]</code>、<code>[[Enumerable]]</code>和<code>[[Writable]]</code>都会被设置为<code>true</code>，而<code>[[Value]]</code>特性会被设置为指定的值</p>
</li>
<li><p>用<code>Object.defineProperty()</code>修改属性的默认特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor);</span><br><span class="line"></span><br><span class="line">- <span class="attr">obj</span>: 要定义属性的对象</span><br><span class="line">- <span class="attr">prop</span>: 要定义或修改的属性的名称或<span class="title class_">Symbol</span></span><br><span class="line">- <span class="attr">descriptor</span>: 要定义或修改的属性描述符</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">// Katrina</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">// Katrina</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	因为设置了writable: false,说明name属性的值不可以被修改</span></span><br><span class="line"><span class="comment">	非严格模式，忽略</span></span><br><span class="line"><span class="comment">	严格模式，抛出错误</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个属性被定义为不可配置（即）<code>configurable=false</code>后，就不能再变回之前的可配置了<code>configurable=true</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在调用<code>Object.defineProperty()</code>时，configurable、enumerable 和writable 的值如果不指定，则都默认为false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">// Katrina</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">// Katrina   说明writable: false</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);   <span class="comment">// Katrina   说明configurable: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)           <span class="comment">// 啥也没有  说明enumerable: false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><blockquote>
<p>访问器属性包含一个获取（getter）函数和一个设置（setter）函数</p>
<ol>
<li>在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值</li>
<li>在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改</li>
</ol>
<p>访问器属性是不能直接定义的，必须使用<code>Object.defineProperty()</code></p>
</blockquote>
<h4 id="configurable"><a href="#Configurable" class="headerlink" title="[[Configurable]]"></a>[[Configurable]]</h4><blockquote>
<p>表示属性是否可以通过delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性</p>
<p>默认情况下，所有直接定义在对象上的属性的这个特性都是true</p>
</blockquote>
<h4 id="enumerable"><a href="#Enumerable" class="headerlink" title="[[Enumerable]]"></a>[[Enumerable]]</h4><blockquote>
<p>表示属性是否可以通过for-in 循环返回</p>
<p>默认情况下，所有直接定义在对象上的属性的这个特性都是true</p>
</blockquote>
<h4 id="get"><a href="#Get" class="headerlink" title="[[Get]]"></a>[[Get]]</h4><blockquote>
<p>获取函数，在读取属性时调用</p>
<p>默认值为undefined。</p>
</blockquote>
<h4 id="set"><a href="#Set" class="headerlink" title="[[Set]]"></a>[[Set]]</h4><blockquote>
<p>设置函数，在写入属性时调用</p>
<p>默认值为undefined</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">    <span class="attr">year_</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">edition</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(book, <span class="string">&#x27;year&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;  </span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">edition</span> += newValue - <span class="number">2018</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">book.<span class="property">year_</span> = <span class="number">2018</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">edition</span>);  <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p><strong>属性访问器的典型使用场景：设置一个属性值会导致一些其他变化发生</strong></p>
<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&&for-of%E7%9A%84%E5%8C%BA%E5%88%AB/">循环语句 | for-in&amp;&amp;for-of的区别</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>和我一起读红宝书</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>和我一起读红宝书</tag>
        <tag>JavaScript对象</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句 | for-in&amp;&amp;for-of的区别</title>
    <url>/2022/07/05/JavaScript/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5_for-in&amp;&amp;for-of%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="forof"><a href="#for…of" class="headerlink" title="for…of.."></a>for…of..</h2><p>for…of用于遍历可迭代对象的元素，在可迭代对象上创建一个迭代循环，调用自定义迭代钩子的next()方法来遍历元素，是有序遍历</p>
<h2 id="forin"><a href="#for…in" class="headerlink" title="for…in.."></a>for…in..</h2><p>for…in用于枚举对象中的属性（包括原型链上的可枚举属性），是无序遍历</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);   <span class="comment">// name age gender</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据打印结果可以看到 for...in枚举原型链上的属性，那么如何改进呢？使用hasOwnProperty</span></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gender</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key)   <span class="comment">// name age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
        <category>常见方法对比</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>常见方法对比</tag>
        <tag>JavaScript语句</tag>
      </tags>
  </entry>
  <entry>
    <title>操作符 | 逗号操作符</title>
    <url>/2022/07/05/JavaScript/%E6%93%8D%E4%BD%9C%E7%AC%A6_%E9%80%97%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    <content><![CDATA[<p>逗号操作符常用场景：</p>
<h3 id="场景1在一条语句中执行多个操作"><a href="#场景1：在一条语句中执行多个操作" class="headerlink" title="场景1：在一条语句中执行多个操作"></a>场景1：在一条语句中执行多个操作</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="number">1</span>, num2 = <span class="number">2</span>, num3 = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="场景2-辅助赋值"><a href="#场景2：-辅助赋值" class="headerlink" title="场景2： 辅助赋值"></a>场景2： 辅助赋值</h3><blockquote>
<p>在赋值的时候使用逗号操作符分隔值，最终会返回表达式中<strong>最后一个值</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = (<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">0</span>);   <span class="comment">// num的值为0</span></span><br></pre></td></tr></table></figure>

<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span>, j &lt; <span class="number">6</span>; i++, j++) &#123;</span><br><span class="line">	<span class="keyword">let</span> k  = i + j;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i, j, k)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	i j k</span></span><br><span class="line"><span class="comment">	0 0 0</span></span><br><span class="line"><span class="comment">	1 1 2</span></span><br><span class="line"><span class="comment">	2 2 4</span></span><br><span class="line"><span class="comment">	3 3 6</span></span><br><span class="line"><span class="comment">	4 4 8</span></span><br><span class="line"><span class="comment">	5 5 10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">6</span>, j &lt; <span class="number">10</span>; i++, j++) &#123;</span><br><span class="line">	<span class="keyword">let</span> k  = i + j;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i, j, k)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    i j k</span></span><br><span class="line"><span class="comment">    0 0 0</span></span><br><span class="line"><span class="comment">    1 1 2</span></span><br><span class="line"><span class="comment">    2 2 4</span></span><br><span class="line"><span class="comment">    3 3 6</span></span><br><span class="line"><span class="comment">    4 4 8</span></span><br><span class="line"><span class="comment">    5 5 10</span></span><br><span class="line"><span class="comment">    6 6 12</span></span><br><span class="line"><span class="comment">    7 7 14</span></span><br><span class="line"><span class="comment">    9 9 18</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>为什么会出现这样的情况？</p>
<p>当有多个条件之间用；隔开时，会返回<strong>最右侧</strong>的条件</p>
<p>如果需要两个要求同时满足，应该把；改为&amp;&amp;</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JavaScript操作符</tag>
      </tags>
  </entry>
  <entry>
    <title>数组 | Array_API（含手写原理）</title>
    <url>/2022/07/06/JavaScript/%E6%95%B0%E7%BB%84_Array_API/</url>
    <content><![CDATA[<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="1new-array-es5"><a href="#（1）new-Array-【ES5】" class="headerlink" title="（1）new Array()        【ES5】"></a>（1）new Array()        【ES5】</h4><p>创建数组可以通过<code>Array</code>构造函数的方式构造数组 （new 操作符可以省略）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);  <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>特殊：当传入一个数值的时候，会创建一个指定数组的数组，用逗号创建的数组空位，值为<code>undefined</code>（关于数组空位，发现一些好玩的，请看这篇<a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/">博文</a>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>(<span class="number">10</span>);  <span class="comment">// 这里省略了new操作符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [empty × 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h4 id="2arrayof-es6"><a href="#（2）Array-of-【ES6】" class="headerlink" title="（2）Array.of()       【ES6】"></a>（2）Array.of()       【ES6】</h4><blockquote>
<p><code>Array.of()</code>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p>
<p><code>Array.of()</code>代替了之前用<code>Array.prototype.slice.call(arguments)</code>转数组的笨拙写法</p>
<p><code>Array.of()</code>和<code>Array</code>构造函数的区别在于处理单个数组的情况</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">10</span>);   <span class="comment">// [empty × 10]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">10</span>);   <span class="comment">// [10]</span></span><br></pre></td></tr></table></figure>

<h4 id="3arrayfrom-es6"><a href="#（3）Array-from-【ES6】" class="headerlink" title="（3）Array.from()        【ES6】"></a>（3）Array.from()        【ES6】</h4><blockquote>
<p><code>Array.from()</code>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p>
</blockquote>
<p><strong>语法</strong>（注意：容易被忽略）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, mapFn, thisArg);</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>arrayLike</code>：类数组或者可迭代对象（如Map，Set等）或者有一个<code>length</code>属性和可索引元素的结构</li>
<li><code>mapFn</code>（可选）：用于增强数组元素的回调函数</li>
<li><code>thisArg</code>（可选）:执行回调时的<code>this</code>对象</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第二个参数的妙用</span></span><br><span class="line"><span class="keyword">let</span> arrLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrLike, <span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [3,6,9,12]</span></span><br></pre></td></tr></table></figure>

<p><code>Array.from()</code>对现有数组是浅拷贝</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arr1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1 === arr2);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="数组索引"><a href="#数组索引" class="headerlink" title="数组索引"></a>数组索引</h3><h4 id="1中括号索引法"><a href="#（1）中括号索引法" class="headerlink" title="（1）中括号索引法"></a>（1）中括号索引法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors[<span class="number">1</span>]);  <span class="comment">// green</span></span><br></pre></td></tr></table></figure>

<h4 id="2arraylength"><a href="#（2）Array-length" class="headerlink" title="（2）Array.length()"></a>（2）Array.length()</h4><blockquote>
<p><code>Array.length()</code>返回或设置一个数组中的元素个数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>注意：数组的<code>length</code>并不只是可读的，而是可以通过修改<code>length</code>属性，从数组的末尾删除或者添加元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">colors.<span class="property">length</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors); <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">colors.<span class="property">length</span> = <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors[<span class="number">3</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用length属性可以方便为数组末尾添加元素</span></span><br><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">colors[colors.<span class="property">length</span>] = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);     <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;, &#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><h4 id="1arrayisarray"><a href="#（1）Array-isArray" class="headerlink" title="（1）Array.isArray()"></a>（1）Array.isArray()</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);   <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>&#125;);   <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><strong>思考：检测一个对象是否是数组的方法有？</strong></p>
<h3 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h3><h4 id="1arrayprototypevalues"><a href="#（1）Array-prototype-values" class="headerlink" title="（1）Array.prototype.values()"></a>（1）Array.prototype.values()</h4><blockquote>
<p><strong><code>values()</code></strong> 方法返回一个新的 <strong><code>Array Iterator</code></strong> 对象，该对象包含数组每个索引的值</p>
</blockquote>
<h4 id="2arrayprototypekeys"><a href="#（2）Array-prototype-keys" class="headerlink" title="（2）Array.prototype.keys()"></a>（2）Array.prototype.keys()</h4><blockquote>
<p><code>**keys()** </code>方法返回一个包含数组中每个索引键的<code>**Array Iterator**</code>对象</p>
</blockquote>
<h4 id="3arrayprototypeentries"><a href="#（3）Array-prototype-entries" class="headerlink" title="（3）Array.prototype.entries()"></a>（3）Array.prototype.entries()</h4><blockquote>
<p><code>**entries()**</code> 方法返回一个新的<strong>Array Iterator</strong>对象，该对象包含数组中每个索引的键&#x2F;值对</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>, <span class="string">&#x27;qux&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> aValues = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">values</span>());</span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">keys</span>());</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">entries</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aValues);   <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;, &#x27;qux&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aKeys);     <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aEntries);   <span class="comment">// [[0, &#x27;foo&#x27;], [1, &#x27;bar&#x27;], [2, &#x27;baz&#x27;], [3, &#x27;qux&#x27;]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用解构赋值可以很容易拆分键值对</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> aEntries) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	0 &#x27;foo&#x27;</span></span><br><span class="line"><span class="comment">	1 &#x27;bar&#x27;</span></span><br><span class="line"><span class="comment">	2 &#x27;baz&#x27;</span></span><br><span class="line"><span class="comment">	3 &#x27;qux&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="复制和填充"><a href="#复制和填充" class="headerlink" title="复制和填充"></a>复制和填充</h3><h4 id="1批量复制copywithin"><a href="#（1）批量复制：copyWithin" class="headerlink" title="（1）批量复制：copyWithin()"></a>（1）批量复制：copyWithin()</h4><blockquote>
<p><code>**copyWithin()**</code> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">copyWithin</span>(target, start, end)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>target</code>：从这个位置开始填充</li>
<li><code>start</code>（可选）：填充的内容从这个位置开始截取</li>
<li><code>end</code>（可选）：填充的内容到这个位置截取完毕（不包含end）</li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li><p>负索引会被计算成负索引+length</p>
</li>
<li><p><code>copyWithin()</code>静默忽略超出数组边界、零长度及方向相反的索引范围</p>
</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>);   <span class="comment">// [2,3,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<h4 id="2填充数组fill"><a href="#（2）填充数组：fill" class="headerlink" title="（2）填充数组：fill()"></a>（2）填充数组：fill()</h4><blockquote>
<p><code>**fill()**</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，不包括终止索引，会改变原数组</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value, start, end)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>value</code>：用于填充数组的元素</li>
<li><code>start</code>：起始索引，默认为0</li>
<li><code>end</code>：终止索引，默认为<code>this.length</code></li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li><p>负索引会被计算成负索引+length</p>
</li>
<li><p><code>fill()</code>静默忽略超出数组边界、零长度及方向相反的索引范围</p>
</li>
</ul>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引过低忽略</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, -<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引过高忽略</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">20</span>, <span class="number">24</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引反向忽略</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [1,2,3,4,5,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引部分可用，填充可用部分</span></span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">3</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);   <span class="comment">// [1,2,3,0,0,0,0]</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><h4 id="1tostring-ampamp-tolocalestring-ampamp-valueof"><a href="#（1）toString-amp-amp-toLocaleString-amp-amp-valueOf" class="headerlink" title="（1）toString()  &amp;&amp; toLocaleString()   &amp;&amp; valueOf()"></a>（1）toString()  &amp;&amp; toLocaleString()   &amp;&amp; valueOf()</h4><blockquote>
<p><code>valueOf()</code>返回数组本身</p>
<p><code>toString()</code>返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串</p>
<p><code>toLocaleString()</code>返回一个字符串表示数组中的元素。数组中的元素将使用各自的 <code>toLocaleString</code> 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"></span><br><span class="line">colors.<span class="title function_">toString</span>();  <span class="comment">// &#x27;red,green,yellow&#x27;</span></span><br><span class="line">colors.<span class="title function_">valueOf</span>();   <span class="comment">// [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">toString</span>())  <span class="comment">// &#x27;red,green,yellow&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(colors.<span class="title function_">valueOf</span>())  <span class="comment">// &#x27;red,green,yellow&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(colors)   <span class="comment">// &#x27;red,green,yellow&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	这里被显式调用toString()方法和valueOf()方法，分别返回数组的字符串表示</span></span><br><span class="line"><span class="comment">	最后alert(colors)，因为alert期待字符串，所以调用了toString()方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">    <span class="title function_">toLocaleString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;Nikolaos&quot;</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">    <span class="title function_">toLocaleString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;Grigorios&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> people = [person1, person2];</span><br><span class="line"><span class="title function_">alert</span>(people); <span class="comment">// Nicholas,Greg   调用toString()</span></span><br><span class="line"><span class="title function_">alert</span>(people.<span class="title function_">toString</span>()); <span class="comment">// Nicholas,Greg   调用toString()</span></span><br><span class="line"><span class="title function_">alert</span>(people.<span class="title function_">toLocaleString</span>()); <span class="comment">// Nikolaos,Grigorios  调用toLocaleString()</span></span><br></pre></td></tr></table></figure>

<h4 id="2join"><a href="#（2）join" class="headerlink" title="（2）join()"></a>（2）join()</h4><blockquote>
<p><code>join()</code>返回以指定分隔符分隔数组元素的字符串</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>));   <span class="comment">// &#x27;red-green-yellow&#x27;</span></span><br></pre></td></tr></table></figure>

<p>注意：如果数组中某一项是<code>null</code>或者<code>undefined</code>，则返回值会以空字符串表示</p>
<h3 id="栈和队列方法"><a href="#栈和队列方法" class="headerlink" title="栈和队列方法"></a>栈和队列方法</h3><h4 id="1push"><a href="#（1）push" class="headerlink" title="（1）push()"></a>（1）push()</h4><blockquote>
<p>向数组末尾添加元素，返回修改后数组的长度</p>
</blockquote>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2pop"><a href="#（2）pop" class="headerlink" title="（2）pop()"></a>（2）pop()</h4><blockquote>
<p>删除数组的最后一项，同时减少数组的<code>length</code>值，返回被删除的元素</p>
</blockquote>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3shift"><a href="#（3）shift" class="headerlink" title="（3）shift()"></a>（3）shift()</h4><blockquote>
<p>删除数组的第一项，同时减少数组的<code>length</code>值，返回被删除的元素</p>
</blockquote>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4unshift"><a href="#（4）unshift" class="headerlink" title="（4）unshift()"></a>（4）unshift()</h4><blockquote>
<p>在数组开头添加元素，返回修改后数组的长度</p>
</blockquote>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h3><h4 id="1数组排序sort"><a href="#（1）数组排序：sort" class="headerlink" title="（1）数组排序：sort()"></a>（1）数组排序：sort()</h4><blockquote>
<p><code>**sort()**</code> 方法用原地算法（即不创建额外的空间）对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(compareFunction)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>compareFunction</code>（可选）：用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的 Unicode 位点进行排序</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareFunction</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    <span class="comment">// 负值，value1排在value2前面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;    <span class="comment">// 正值，value1排在value2后面</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2翻转数组reverse"><a href="#（2）翻转数组：reverse" class="headerlink" title="（2）翻转数组：reverse()"></a>（2）翻转数组：reverse()</h4><blockquote>
<p><code>**reverse()**</code> 方法将数组中元素的位置颠倒，并返回该数组，该方法会改变原数组</p>
</blockquote>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><h4 id="1合并数组concat"><a href="#（1）合并数组：concat" class="headerlink" title="（1）合并数组：concat()"></a>（1）合并数组：concat()</h4><blockquote>
<p><code>**concat()**</code> 方法用于合并两个或多个数组，此方法会首先创建一个当前数组的副本，然后再把参数添加到副本末尾，所以不会更改现有数组，而是返回一个新数组</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = old_array.<span class="title function_">concat</span>(value1[, value2[, ...[, valueN]]])</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>valueN</code>：可以是数组或者值</li>
</ul>
<p><strong>注意</strong></p>
<p>可以使用<code>Symbol.isConcatSpreadable</code>来控制传入的类数组对象是否强制打平，<code>true</code>为强制打平</p>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> a3 = &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制打平</span></span><br><span class="line"><span class="keyword">let</span> a1_2 = a1.<span class="title function_">concat</span>(a2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1_2);     <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不强制打平</span></span><br><span class="line"><span class="keyword">let</span> a1_3 = a1.<span class="title function_">concat</span>(a3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1_3);     <span class="comment">// [1,2,3, &#123;[Symbol.isConcatSpreadable]:false,length: 2,0: 4,1: 5&#125;]</span></span><br></pre></td></tr></table></figure>

<h4 id="2截取数组slice"><a href="#（2）截取数组：slice" class="headerlink" title="（2）截取数组：slice()"></a>（2）截取数组：slice()</h4><blockquote>
<p><code>**slice()**</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）,原始数组不会被改变</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">slice</span>(start, end);</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>start</code>（可选）：起始索引，默认为0</li>
<li><code>end</code>（可选）：终止索引（不含），默认为<code>this.length</code></li>
</ul>
<p><strong>注意</strong></p>
<ul>
<li>遇到负索引需要进行索引+length处理</li>
<li><code>start</code>超过原数组的索引范围返回空数组</li>
<li><code>end</code>大于原数组的长度，则截取到原数组的末尾</li>
</ul>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3插入元素splice"><a href="#（3）插入元素：splice" class="headerlink" title="（3）插入元素：splice()"></a>（3）插入元素：splice()</h4><blockquote>
<p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组，并以数组形式返回被修改的内容，此方法会改变原数组</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">splice</span>(start, deletcount, item1, item2,...)</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<ul>
<li><code>start</code>：起始位置</li>
<li><code>deletecount</code>（可选）:要移除数组元素的个数，0或者负数表示不移除</li>
<li><code>item1 item2</code>（可选）：要添加的元素</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li><strong>删除</strong>：传2个参数</li>
<li><strong>插入</strong>：传3个参数</li>
<li><strong>替换</strong>：传3个参数</li>
</ul>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="搜索和位置方法"><a href="#搜索和位置方法" class="headerlink" title="搜索和位置方法"></a>搜索和位置方法</h3><h4 id="1按严格相等搜索indexof-ampamp-lastindexof-ampamp-inclues"><a href="#（1）按严格相等搜索：indexOf-amp-amp-lastIndexOf-amp-amp-inclues" class="headerlink" title="（1）按严格相等搜索：indexOf() &amp;&amp;  lastIndexOf()  &amp;&amp; inclues()"></a>（1）按严格相等搜索：indexOf() &amp;&amp;  lastIndexOf()  &amp;&amp; inclues()</h4><blockquote>
<p><code>indexOf()</code>方法返回在数组中可以找到一个给定元素的<strong>第一个</strong>索引，如果不存在，则返回-1</p>
<p><code>lastIndexOf()</code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1，从数组的后面向前查找，从 <code>fromIndex</code> 处开始</p>
<p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code></p>
</blockquote>
<p><strong>注意</strong></p>
<ul>
<li>三者都可以指定<code>fromIndex</code>，即从哪一项开始寻找</li>
<li>三者都采用严格相等搜索，即<code>===</code>比较</li>
<li>找到目标之后不会继续往下找</li>
</ul>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2按断言函数搜索find-ampamp-findindex"><a href="#（2）按断言函数搜索：find-amp-amp-findIndex" class="headerlink" title="（2）按断言函数搜索：find() &amp;&amp; findIndex()"></a>（2）按断言函数搜索：find() &amp;&amp; findIndex()</h4><blockquote>
<p><code>**find()**</code> 方法返回数组中满足提供的测试函数的第一个元素的值，否则返回undefined</p>
<p><code>**findIndex()**</code>方法返回数组中满足提供的测试函数的<strong>第一个元素的</strong>索引，若没有找到对应元素则返回-1</p>
</blockquote>
<p><strong>注意</strong></p>
<ul>
<li>两者都采用断言函数搜索，断言函数接收3个参数：元素 索引 数组本身</li>
<li>因此两个的参数都是一个回调函数</li>
<li>找到目标之后不会继续往下找</li>
</ul>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><h4 id="1every"><a href="#（1）every" class="headerlink" title="（1）every()"></a>（1）every()</h4><blockquote>
<p><code>**every()**</code> 方法测试一个数组内的<strong>所有元素</strong>是否都能通过某个指定函数的测试，它返回一个布尔值</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);  <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	特点：必须每一项元素都满足条件</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2some"><a href="#（2）some" class="headerlink" title="（2）some()"></a>（2）some()</h4><blockquote>
<p><code>**some()**</code> 方法测试数组中是不是至少有 1 个元素通过了被提供的函数测试，它返回一个布尔值</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);  <span class="comment">// true</span></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">4</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	特点：只要有一项元素满足即可</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3filter"><a href="#（3）filter" class="headerlink" title="（3）filter()"></a>（3）filter()</h4><blockquote>
<p><code>**filter()**</code> 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>);  <span class="comment">// [ 6, 7]</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4foreach"><a href="#（4）forEach" class="headerlink" title="（4）forEach()"></a>（4）forEach()</h4><blockquote>
<p><code>**forEach()**</code> 方法对数组的每个元素执行一次给定的函数，没有返回值，改变原数组</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);  <span class="comment">// [6,8,10,12,14]</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5map"><a href="#（5）map" class="headerlink" title="（5）map()"></a>（5）map()</h4><blockquote>
<p><code>**map()**</code> 方法创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);  <span class="comment">// [6,8,10,12,14]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><code>map</code>仅对每一项已分配值得索引调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newA = a.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>); <span class="comment">// [2,4,,8]</span></span><br></pre></td></tr></table></figure>

<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><h4 id="1reduce"><a href="#（1）reduce" class="headerlink" title="（1）reduce()"></a>（1）reduce()</h4><blockquote>
<p><code>reduce()</code>接收两个参数：归并函数和归并起点的初始值</p>
<p>其中归并函数接收四个参数：上一个归并值、当前项、当前项的索引、数组本身。归并函数返回的任何值都会成为下一次调用同一个函数的第一个参数，即归并值，如果没有归并起点的初始值，则把第一个元素作为初始值，迭代从第二个元素开始</p>
</blockquote>
<p>reduce的应用详见：<a href="%E5%8D%A0%E4%BD%8D">强大的reduce</a></p>
<p><strong>手写实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2reduceright"><a href="#（2）reduceRight" class="headerlink" title="（2）reduceRight()"></a>（2）reduceRight()</h4><blockquote>
<p><code>reduceRight()</code>与<code>reduce()</code>唯一不同的就是遍历方向是从最后一项到第一项，其余全部相同</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="1数组扁平化flat"><a href="#（1）数组扁平化：flat" class="headerlink" title="（1）数组扁平化：flat()"></a>（1）数组扁平化：flat()</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="1改变原数组方法"><a href="#（1）改变原数组方法" class="headerlink" title="（1）改变原数组方法"></a>（1）改变原数组方法</h4><h4 id="2es6新增方法"><a href="#（2）ES6新增方法" class="headerlink" title="（2）ES6新增方法"></a>（2）ES6新增方法</h4><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/">数组空位</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_map%E5%92%8CforEach%E7%9A%84%E5%8C%BA%E5%88%AB/">map和forEach的区别</a></p>
<p><a href="%E5%8D%A0%E4%BD%8D">强大的reduce</a></p>
<p><a href="%E5%8D%A0%E4%BD%8D">深浅拷贝</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN Array</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>和我一起做总结</category>
        <category>和我一起读红宝书</category>
        <category>手写原理</category>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>和我一起读红宝书</tag>
        <tag>ES6</tag>
        <tag>和我一起做总结</tag>
        <tag>JavaScript数组</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>数组 | map和forEach的区别</title>
    <url>/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_map%E5%92%8CforEach%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="foreach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p><code>forEach</code>方法：针对每一个元素执行提供的函数，没有返回值，直接修改原数组</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote>
<p><code>map</code>方法：返回一个数组，其中数组的每一项都是对原始数组中同样位置的元素运行传入函数而返回的结果，并且仅对每一项已分配值得索引调用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item*<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);   <span class="comment">// [2,4,6]</span></span><br></pre></td></tr></table></figure>

<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul>
<li><code>map</code>方法适用于创建一个与原数组元素一一对应的数组，<code>map</code>方法还可以进一步结合<code>filter</code>，<code>reduce</code>等</li>
<li><code>forEach</code>方法适用于并不打算改变数据，而是想用数组的元素做一下操作的时候，比如打印，存入其他数组等</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>常见方法对比</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>常见方法对比</tag>
        <tag>JavaScript数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数组 | 强大的reduce（含手写原理）</title>
    <url>/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E5%BC%BA%E5%A4%A7%E7%9A%84reduce/</url>
    <content><![CDATA[<h3 id="reduce相关语法"><a href="#reduce相关语法" class="headerlink" title="reduce相关语法"></a>reduce相关语法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(callbackFn, [initalValue]);</span><br></pre></td></tr></table></figure>

<p><strong>callbackFn</strong>：reducer函数</p>
<p>包含四个参数：</p>
<ul>
<li>previousValue：上一次调用callbackFn的返回值，在第一次调用的时候，如果指定了initalValue，则其值为initalValue，否则为数组索引为0的元素</li>
<li>currentValue：数组正在处理的元素，在第一次调用的时候，如果指定了initalValue，其值为数组索引为0的元素，否则为数组索引为1的元素</li>
<li>currentIndex：数组正在处理的元素的索引，如果指定了initalValue，起始索引为0，否则为1</li>
<li>array：用于遍历的数组</li>
</ul>
<p><strong>initalValue</strong>（可选）：</p>
<ul>
<li>第一次调用时作为previousValue的值，这是一个可选的参数</li>
</ul>
<p><strong>注意点</strong></p>
<ul>
<li>reducer不会改变原数组</li>
<li>reducer中的callbackFn需要返回值（因为需要作为下一次调用的previousValue）</li>
</ul>
<h3 id="reduce源码实现"><a href="#reduce源码实现" class="headerlink" title="reduce源码实现"></a>reduce源码实现</h3><p><strong>实现思路</strong></p>
<ul>
<li>类型检验：回调函数是否对函数，数组是否为空等</li>
<li>初始值提供检测，用于确定初始previousValue的值</li>
<li>返回累计值</li>
</ul>
<p><strong>代码实现</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span>(<span class="params">callbackFn, initalValue</span>) &#123;</span><br><span class="line">    <span class="comment">// Step1：类型检验</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Array.prototype.reduce called on null or undefined&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callbackFn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Callback must be a function&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> obj = <span class="title class_">Object</span>(<span class="variable language_">this</span>);    <span class="comment">// #1</span></span><br><span class="line">    <span class="keyword">const</span> lenValue = obj.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> len = lenValue &gt;&gt;&gt; <span class="number">0</span>;  <span class="comment">// #2</span></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span> &amp;&amp; !initalValue) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The array contains no elements and initalValue is not provided&#x27;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> accumulator;   <span class="comment">// 这里变量名为accumulator十分贴合reduce函数作为累加器使用的性质</span></span><br><span class="line">    <span class="comment">// Step2:初始accumulator的值确定</span></span><br><span class="line">    <span class="keyword">if</span> (initalValue) &#123;</span><br><span class="line">        <span class="comment">// 有initalValue，accumulator就为初始值</span></span><br><span class="line">        accumulator = initalValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有initalValue，就需要把数组的第一个值即arr[0]作为初始值</span></span><br><span class="line">        <span class="comment">// 这里别着急，我们还需要做进一步检测</span></span><br><span class="line">        <span class="keyword">let</span> kPressent = <span class="literal">false</span>;    <span class="comment">// #3</span></span><br><span class="line">        <span class="keyword">while</span> (!kPressent &amp;&amp; k &lt; len) &#123;</span><br><span class="line">            <span class="keyword">const</span> pK = <span class="title class_">String</span>(k);</span><br><span class="line">            kPressent = obj.<span class="title function_">hasOwnProperty</span>(pK);    <span class="comment">// 第一个检测到合法的元素作为</span></span><br><span class="line">            <span class="keyword">if</span> (kPressent) &#123;</span><br><span class="line">                accumulator = obj[pK];</span><br><span class="line">            &#125;;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (!kPressent) &#123;      <span class="comment">// 数组没有合法元素，报错</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The array contains error elements&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 到这里我们已经确定了accumulator的值</span></span><br><span class="line">    <span class="comment">// 注意：如果initalValue存在，k=0，如果不存在，则accumulator = 数组第一个合法元素，k因为之前也++了，k=k</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Step3:确定callback的返回值</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">in</span> obj)&#123; <span class="comment">// # 4</span></span><br><span class="line">           	accumulator = <span class="title function_">callbackFn</span>(accumulator, obj[k], k, obj);</span><br><span class="line">        &#125;;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test:</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">myReduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev+curr, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);   <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>

<p><strong>说明</strong></p>
<ul>
<li><p>#1：<code>Object(this)</code></p>
<p><strong>Object构造函数作为一个工厂函数，能够根据传入的值的类型返回相应原始值包装类型的实例</strong></p>
<ul>
<li><code>null</code>或者<code>undefined</code>：将会创建并返回一个空对象</li>
<li>基本类型的值：构造其包装类型的对象</li>
<li>引用类型的值：仍然返回这个值，经他们复制的变量保有和源对象相同的引用地址</li>
</ul>
</li>
<li><p>#2：<code>len = lenValue &gt;&gt;&gt; 0</code></p>
</li>
</ul>
<p>​		<strong><code>&gt;&gt;&gt;</code>表示无符号右移，为了保证结果为非负整数</strong></p>
<ul>
<li><p>#3: 获取数组第一个有效元素</p>
<p>我觉得这里主要为了检测空值，虽然之前说了若是没有initalValue，previousValue就为array[0]，但是若出现数组前面有空值或者全部为<a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/">空值</a>的情况，previous的取值是需要慎重的，所以<strong>初始化previousValue准确地说应该是数组中合法的第一个元素</strong></p>
</li>
<li><p>#4：跳过空值（补课：<a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/">空值检测以及reduce对存在空值的数组处理</a>）</p>
</li>
</ul>
<h3 id="reduce应用场景"><a href="#reduce应用场景" class="headerlink" title="reduce应用场景"></a>reduce应用场景</h3><h4 id="累和ampamp累积"><a href="#累和-amp-amp-累积" class="headerlink" title="累和&amp;&amp;累积"></a>累和&amp;&amp;累积</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev+curr, <span class="number">0</span>);   <span class="comment">// 15</span></span><br><span class="line"><span class="keyword">let</span> mul = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> prev*curr, <span class="number">1</span>);   <span class="comment">// 120</span></span><br></pre></td></tr></table></figure>

<h4 id="求最大值x2f最小值"><a href="#求最大值-x2F-最小值" class="headerlink" title="求最大值&#x2F;最小值"></a>求最大值&#x2F;最小值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> maxValue = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(prev, curr));  <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">let</span> minValue = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(prev, curr));  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (prev.<span class="title function_">indexOf</span>(curr) === -<span class="number">1</span>) &#123;</span><br><span class="line">        prev.<span class="title function_">push</span>(curr);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;, []);   <span class="comment">// [3, 7, 4, 2, 5, 8]</span></span><br></pre></td></tr></table></figure>

<h4 id="实现map函数"><a href="#实现map函数" class="headerlink" title="实现map函数"></a>实现map函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .map(callback)  callback = function(item, index, arr) &#123;...&#125;</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">        	prev.<span class="title function_">push</span>(<span class="title function_">callback</span>(item, index, arr));</span><br><span class="line">        	<span class="keyword">return</span> prev;</span><br><span class="line">        &#125;, [])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;callback is not a fucntion&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">myMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>);   <span class="comment">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure>

<h4 id="实现filter函数"><a href="#实现filter函数" class="headerlink" title="实现filter函数"></a>实现filter函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .filter(callback)  callback(item, index, arr) &#123;...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">callback</span>(item, index, arr)) &#123;</span><br><span class="line">                prev.<span class="title function_">push</span>(item);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;, [])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;callback is not a fucntion&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> filterArr = arr.<span class="title function_">myFilter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>);  <span class="comment">// [4,5]</span></span><br></pre></td></tr></table></figure>

<h4 id="实现compose函数"><a href="#实现compose函数" class="headerlink" title="实现compose函数"></a>实现compose函数</h4><blockquote>
<p>compose函数是指将函数按顺序执行，<strong>将若干个函数组合成一个函数来执行，并且每个函数执行的结果都能作为下一个函数的参数</strong></p>
</blockquote>
<p>假设有这样两个函数，一个求和函数，一个累积函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value += <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mul</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value *= <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一般情况下，会这样使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">sum</span>(value);</span><br><span class="line">res = <span class="title function_">mul</span>(res);  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);   <span class="comment">// 300</span></span><br></pre></td></tr></table></figure>

<p>若是有compose函数，将可以实现以下效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="title function_">compose</span>(sum, mul);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(value));  <span class="comment">// 300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> <span class="title function_">curr</span>(prev),x)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="按顺序执行promise"><a href="#按顺序执行Promise" class="headerlink" title="按顺序执行Promise"></a>按顺序执行Promise</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runPromiseInSequence</span>(<span class="params">arr, input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">promiseChain, currentFunction</span>) =&gt;</span> promiseChain.<span class="title function_">then</span>(currentFunction),</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(input)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise function 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(a * <span class="number">5</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise function 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(a * <span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function 3  - will be wrapped in a resolved promise by .then()</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f3</span>(<span class="params">a</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise function 4</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p4</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(a * <span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseArr = [p1, p2, f3, p4]</span><br><span class="line"><span class="title function_">runPromiseInSequence</span>(promiseArr, <span class="number">10</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)   <span class="comment">// 1200</span></span><br></pre></td></tr></table></figure>

<h4 id="实现数组扁平化"><a href="#实现数组扁平化" class="headerlink" title="实现数组扁平化"></a>实现数组扁平化</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// flat(depth) </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFlat</span>(<span class="params">arr, depth</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (depth &lt; <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(cur) ? prev.<span class="title function_">concat</span>(<span class="title function_">myFlat</span>(cur, depth-<span class="number">1</span>)) : prev.<span class="title function_">concat</span>(cur);</span><br><span class="line">        &#125;, [])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;this is not an array&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>,<span class="number">4</span>, [<span class="number">5</span>]], [<span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>,[<span class="number">9</span>, [<span class="number">10</span>]]]]</span><br><span class="line"><span class="title function_">myFlat</span>(arr, <span class="number">2</span>)    <span class="comment">// [1, 2, 3,4, 5, 6, 7, 8,9, [10]]</span></span><br></pre></td></tr></table></figure>

<h4 id="统计数组元素出现次数"><a href="#统计数组元素出现次数" class="headerlink" title="统计数组元素出现次数"></a>统计数组元素出现次数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, curr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prev.<span class="title function_">has</span>(curr)) &#123;</span><br><span class="line">            prev.<span class="title function_">set</span>(curr, prev.<span class="title function_">get</span>(curr)+<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.<span class="title function_">set</span>(curr, <span class="number">1</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, <span class="keyword">new</span> <span class="title class_">Map</span>())</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> m = <span class="title function_">count</span>(arr);   <span class="comment">// &#123;1=&gt;3, 2=&gt;3, 3=&gt;3, 4=&gt;1, 5=&gt;5, 6=&gt;2&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用函数组合实现管道"><a href="#使用函数组合实现管道" class="headerlink" title="使用函数组合实现管道"></a>使用函数组合实现管道</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params">input</span>) &#123; <span class="keyword">return</span> input + <span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrement</span>(<span class="params">input</span>) &#123; <span class="keyword">return</span> input - <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">input</span>) &#123; <span class="keyword">return</span> input * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">halve</span>(<span class="params">input</span>) &#123; <span class="keyword">return</span> input / <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pipeline = [increment, double, decrement];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = pipeline.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">total, func</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">func</span>(total);</span><br><span class="line">&#125;, <span class="number">8</span>);   <span class="comment">// 17</span></span><br></pre></td></tr></table></figure>



<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/">空值检测</a></p>
<p><a href="%E5%8D%A0%E4%BD%8D">原始值包装类型</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">MDN reduce</a></p>
<p><a href="https://juejin.cn/post/6844903828538523656">你应该知道的JS: reduce的n种应用</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1885382">6个关于Reduce() 应用场景的用例</a></p>
<p><a href="https://segmentfault.com/a/1190000037682220">JavaScript之Array.reduce源码解读</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>和我一起做总结</category>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>和我一起做总结</tag>
        <tag>JavaScript数组</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>数组 | 数组空位和undefined</title>
    <url>/2022/07/07/JavaScript/%E6%95%B0%E7%BB%84_%E6%95%B0%E7%BB%84%E7%A9%BA%E4%BD%8D%E5%92%8Cundefined/</url>
    <content><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p><strong>举例1</strong></p>
<p>之前在做算法题的时候遇到这样一个问题：我想创建一个n*m 的数组，于是我采用这样的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">10</span>, m = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> grid = <span class="title class_">Array</span>(n).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title class_">Array</span>(m))</span><br></pre></td></tr></table></figure>

<p>结果，<code>grid</code>打印的结果为<code>[empty × 10]</code>，这说明<code>map</code>根本没起作用，阅读红宝书的时候发现在第四版141页数组空位的地方有说明，原话是“<code>map()</code>会跳过空位置”，用专业术语说，**<code>map</code>仅对每一项已分配值的索引调用**，所以要是我想实现我想要的效果，我应该写如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">10</span>, m = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> grid = <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title class_">Array</span>(m))  </span><br><span class="line"><span class="comment">// [Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10)]    length = 10</span></span><br></pre></td></tr></table></figure>

<p><strong>举例2</strong></p>
<p>我们已经直到，<code>map</code>方法会跳过空位置，并且红宝书第四版P140页提到”<code>ES6</code>中普遍将空位当作存在的元素，值为<code>undefined</code>“，下面的例子证实了这个说法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>] === <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>再看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">undefined</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1_n = arr1.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;);   <span class="comment">// [2,2,,2]</span></span><br><span class="line"><span class="keyword">let</span> arr2_n = arr2.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;);    <span class="comment">// [2,2,2,2]</span></span><br></pre></td></tr></table></figure>

<p>咦？<code>undefined</code>的位置没有被跳过，而空值显然被跳过了</p>
<p>于是引发了两个问题：</p>
<ol>
<li>尽管空值位置的值是<code>undefined</code>，但是和<code>undefined</code>还是有本质的区别，究竟是怎么样的区别呢？</li>
<li><code>map</code>是怎么判断是空值还是<code>undefined</code>的呢？通过<code>arr[index] === undefined</code>显然是行不通的</li>
</ol>
<p>要解答这两个问题，就要回归到上面说的**<code>map</code>仅对每一项已分配值的索引调用**，<code>undefined</code>数据基本数据类型，当然属于值</p>
<h3 id="空位和undefined"><a href="#空位和undefined" class="headerlink" title="空位和undefined"></a>空位和undefined</h3><h4 id="产生空位的操作"><a href="#产生空位的操作" class="headerlink" title="产生空位的操作"></a>产生空位的操作</h4><p>以下操作均会产生空位</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array构造函数传一个数值表示数组长度</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="title class_">Array</span>(<span class="number">5</span>);   <span class="comment">// [,,,,]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组字面量创建</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [,,,,,];</span><br><span class="line"></span><br><span class="line"><span class="comment">// length属性</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [];</span><br><span class="line">arr3.<span class="property">length</span> = <span class="number">5</span>;   <span class="comment">// [,,,,,]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过索引增加数组元素是超过数组长度</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line">arr4[<span class="number">10</span>] = <span class="number">5</span>;   <span class="comment">// [1,2,3,,,,,,,,,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数组元素产生空位</span></span><br><span class="line"><span class="keyword">let</span> arr5 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">delete</span> arr5[<span class="number">1</span>];   <span class="comment">// [1,,3]</span></span><br></pre></td></tr></table></figure>

<h4 id="用in操作符或者hasownproperty检测空值和undefined"><a href="#用in操作符或者hasOwnProperty-检测空值和undefined" class="headerlink" title="用in操作符或者hasOwnProperty()检测空值和undefined"></a>用in操作符或者hasOwnProperty()检测空值和undefined</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];   <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [,,,]   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> o = <span class="title class_">Object</span>(a);</span><br><span class="line"></span><br><span class="line">o.<span class="title function_">hasOwnProperty</span>(<span class="number">2</span>);  <span class="comment">// false</span></span><br><span class="line">o.<span class="title function_">hasOwnProperty</span>(<span class="number">1</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>说明<code>[undefined, undefined, undefined]</code>在索引0处有值，<code>[,,,]</code>在索引0处没有值</p>
<h3 id="不同方法对空值的处理"><a href="#不同方法对空值的处理" class="headerlink" title="不同方法对空值的处理"></a>不同方法对空值的处理</h3><h4 id="忽略空值"><a href="#忽略空值" class="headerlink" title="忽略空值"></a>忽略空值</h4><blockquote>
<p><code>map()</code>：跳过空位，但会保留这个值</p>
<p><code>forEach()</code>, <code>filter()</code>, <code>every()</code>，<code>some()</code>，<code>reduce()</code>：跳过空位</p>
<p><code>join()</code>，<code>toString()</code>，<code>Array.from</code>，<code>展开运算符</code>：会将空位视为空字符串</p>
<p><code>fill()</code>：将空位视为正常值</p>
<p><code>copyWithin()</code>：连着空位一起拷贝</p>
</blockquote>
<p><strong>举例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// map()</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>);  <span class="comment">// [2,,6];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">4</span>);  <span class="comment">// [1,2,3];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// join</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)  <span class="comment">// 1--3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>).<span class="title function_">fill</span>(<span class="number">0</span>);   <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// copyWithin()</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);   <span class="comment">// [1,4,,4,,6,7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce()</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev+cur);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/178302866">JS中的数组空位和undefined</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>常见方法对比</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>常见方法对比</tag>
        <tag>JavaScript数组</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理 | Object.create</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_Object.create/</url>
    <content><![CDATA[<h3 id="mdn-文档"><a href="#MDN-文档" class="headerlink" title="MDN 文档"></a>MDN 文档</h3><blockquote>
<p>Object.create()方法用于创建一个新对象，使用现有的对象来作为新创建对象的原型。</p>
</blockquote>
<p><strong>语法如下：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.create(proto);</span><br><span class="line">Object.create(proto, propertiesObject);</span><br></pre></td></tr></table></figure>

<p><strong>参数说明：</strong></p>
<p><code>proto</code>：新建对象的原型对象</p>
<p><code>propertiesObject</code>（可选）：传入对象的可枚举属性将为新创建的对象添加指定的属性值和对应的属性描述符，这些属性对应于<code>Object.defineProperties()</code>的第二个参数</p>
<p><strong>返回值：</strong></p>
<p>一个新对象，带着指定的原型对象及其属性</p>
<h3 id="手写objectcreate"><a href="#手写Object-create" class="headerlink" title="手写Object.create()"></a>手写Object.create()</h3><p><strong>实现思路：</strong>定义一个空的构造函数，把构造函数的原型指定为传入的对象，利用<code>new</code>构造函数，返回构造函数的实例，达到创建空对象的目的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCreate</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">   	<span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;Katrina&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">__proto__</span> === obj);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.myCreate();</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title class_">Object</span>.<span class="title function_">myCreate</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">__proto__</span> === obj);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> obj.<span class="property">constructor</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2 <span class="keyword">instanceof</span> obj.<span class="property">constructor</span>);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h2><p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_new/">手写new</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_instanceof/">手写instanceof</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计网 | HTTP状态码</title>
    <url>/2022/07/07/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%BD%91_HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>HTTP状态码是非常重要的一个知识点，尤其是对于前端工作者来说，我们在发送网络请求获取资源的时候，经常返回不同的状态码，那么各种状态码都代表什么含义呢~让我们一探究竟吧！</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">含义</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1xx</td>
<td align="center">Informational (信息性状态码)</td>
<td align="center">接收的请求正在处理</td>
</tr>
<tr>
<td align="center">2xx</td>
<td align="center">Success（成功状态码）</td>
<td align="center">请求正常处理完毕</td>
</tr>
<tr>
<td align="center">3xx</td>
<td align="center">Redirection（重定向状态码）</td>
<td align="center">需要进行附加操作继而完成请求</td>
</tr>
<tr>
<td align="center">4xx</td>
<td align="center">Client Error（客户端错误状态码）</td>
<td align="center">服务器无法处理请求</td>
</tr>
<tr>
<td align="center">5xx</td>
<td align="center">Server Error（服务器错误状态码）</td>
<td align="center">服务器请求错误</td>
</tr>
</tbody></table>
<h2 id="2xxsucess成功状态码"><a href="#2XX（Sucess成功状态码）" class="headerlink" title="2XX（Sucess成功状态码）"></a>2XX（Sucess成功状态码）</h2><ul>
<li>200 OK：客户端发来的请求被服务端正常处理了</li>
<li>204 No Content：客户端发送的请求已经在服务端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分（一般在只需要从客户端往服务端发送信息，而服务器端不需要往客户端发送内容时使用）</li>
<li>206 Partial Conent：客户端进行了范围请求，而服务器端执行了这部分GET请求，响应报文中包含由Content-Range指定范围的实体内容</li>
</ul>
<h2 id="3xxredirection重定向状态码"><a href="#3XX（Redirection重定向状态码）" class="headerlink" title="3XX（Redirection重定向状态码）"></a>3XX（Redirection重定向状态码）</h2><p>3xx响应结果表明浏览器需要执行某些特殊的处理以正确处理请求</p>
<ul>
<li><p>301 Moved Permanently（永久重定向）：请求的资源已经被分配到新的URL，以后应使用资源指定的URL</p>
</li>
<li><p>302 Found（临时重定向）：请求的资源被分配到新的URL，希望用户（本次）能够使用新的URL访问资源</p>
<ul>
<li>登录首页自动重定向到活动页面</li>
<li>未登录用户访问用户中心重定向到登录页面</li>
<li>访问404后重定向到首页</li>
</ul>
</li>
<li><p>303 See Other：由于请求对应的资源存在着另一个URL，应使用GET方法重定向获取请求资源，和302类似，但是303状态码明确表示客户端应当采用GET获取资源（消息确认页面或者上传进度页面）</p>
</li>
<li><p>304 Not Modified（浏览器缓存相关）：客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况，304状态码返回时，不包含任何响应的主体部分</p>
</li>
<li><p>307 Temporary Redirect（临时重定向）：和302类似</p>
</li>
</ul>
<h2 id="4xxclient-error客户端错误状态码"><a href="#4XX（Client-Error客户端错误状态码）" class="headerlink" title="4XX（Client Error客户端错误状态码）"></a>4XX（Client Error客户端错误状态码）</h2><p>4xx响应结果表示客户端是错误所在</p>
<ul>
<li>400 Bad Request：请求报文中存在语法错误，当错误发生时，需修改请求的内容后，再次发送请求</li>
<li>401 Unauthorized：发送的请求需要由通过HTTP认证的认证信息，若之前已进行过一次请求，则表示用户认证失败</li>
<li>403 Forbidden：请求资源的访问被服务器拒绝</li>
<li>404 Not Found：没有在服务器找到资源</li>
<li>405 Method Not Allowed：客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法</li>
</ul>
<h2 id="5xxserver-error服务器错误状态码"><a href="#5XX（Server-Error服务器错误状态码）" class="headerlink" title="5XX（Server Error服务器错误状态码）"></a>5XX（Server Error服务器错误状态码）</h2><ul>
<li>500 Internal Server Error：服务器端在执行请求时发生了错误</li>
<li>502 Bad Gateway：扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的</li>
<li>503 Service Unavailable：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</li>
<li>504 Gateway Timeout：网关或者代理的服务器无法在规定的时间内获得想要的响应</li>
</ul>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
        <tag>HTTP状态码</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络 | AJAX</title>
    <url>/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/</url>
    <content><![CDATA[<h2 id="ajax概述"><a href="#AJAX概述" class="headerlink" title="AJAX概述"></a>AJAX概述</h2><p>Ajax &#x3D; Asynchronous JavaScript + XML </p>
<p>Ajax主要依赖于XMLHttpRequest（<strong>XHR</strong>）对象，XHR为发送服务器请求和获取响应提供了合理的接口。这个接口可以实现异步从服务器获取额外数据，意味着用户点击不用页面刷新也可以获取数据。通过XHR对象获取数据后，可以使用DOM方法把数据插入网页。</p>
<h2 id="ajax优点"><a href="#AJAX优点" class="headerlink" title="AJAX优点"></a>AJAX优点</h2><p>W3school里面是这么说的</p>
<img src="/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/AJAX%E4%BC%98%E7%82%B9.png" class title="AJAX优点">

<p>言简意赅就是在说AJAX可以不刷新页面更新数据，AJAX可以实现与服务器的通信</p>
<h3 id="1-无刷新更新数据"><a href="#1-无刷新更新数据" class="headerlink" title="1. 无刷新更新数据"></a>1. 无刷新更新数据</h3><p>这是AJAX最大的优点：不用刷新整个页面的前提下与服务器通信维护数据，有利于Web应用程序更为迅速地响应用户交互，避免了在网络上发送没有改变的信息，减少用户等待时间，带来了较好的用户体验。</p>
<h3 id="2-异步与服务器通信"><a href="#2-异步与服务器通信" class="headerlink" title="2. 异步与服务器通信"></a>2. 异步与服务器通信</h3><p>AJAX使用异步方式与服务器通信，不需要打断用户的操作，具有更加迅速的响应能力。优化了Browser和Server之间的沟通，减少不必要的数据传输、时间以及降低网络上的数据流量。</p>
<h3 id="3-前端和后端负载平衡"><a href="#3-前端和后端负载平衡" class="headerlink" title="3. 前端和后端负载平衡"></a>3. 前端和后端负载平衡</h3><p>AJAX可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。AJAX的原则是”按需获取数据“，可以最大程度的减少冗余请求和响应对服务器造成的负担，提升站点性能。</p>
<h3 id="4-基于标准化被广泛支持"><a href="#4-基于标准化被广泛支持" class="headerlink" title="4. 基于标准化被广泛支持"></a>4. 基于标准化被广泛支持</h3><p>AJAX基于标准化的并被广泛支持的技术，不需要下载浏览器插件或者小程序，但需要客户允许在JavaScript浏览器上执行，随着AJAX的成熟，一些简化AJAX的使用方法的程序库也相继问世。</p>
<h3 id="5-界面与页面分离"><a href="#5-界面与页面分离" class="headerlink" title="5. 界面与页面分离"></a>5. 界面与页面分离</h3><p>AJAX是的Web中的界面与应用分离，有利于分工合作、减少非技术任意对页面的修改造成的web应用程序错误、提高效率，更加适用于现在的发布系统。</p>
<h3 id="ajax缺点"><a href="#AJAX缺点" class="headerlink" title="AJAX缺点"></a>AJAX缺点</h3><h3 id="1-ajax破坏了浏览器机制"><a href="#1-AJAX破坏了浏览器机制" class="headerlink" title="1. AJAX破坏了浏览器机制"></a>1. AJAX破坏了浏览器机制</h3><p>因为AJAX是动态更新局部页面的，所以用户无法回到前一个页面状态，因为一般来说，浏览器可以通过back和history的功能回到历史记录中的静态页面，但是在AJAX中这是无法实现的。</p>
<h3 id="2-ajax的安全问题"><a href="#2-AJAX的安全问题" class="headerlink" title="2. AJAX的安全问题"></a>2. AJAX的安全问题</h3><p>AJAX暴露了浏览器与服务器交互的细节。</p>
<h3 id="3-ajax不能很好地兼容移动设备"><a href="#3-AJAX不能很好地兼容移动设备" class="headerlink" title="3. AJAX不能很好地兼容移动设备"></a>3. AJAX不能很好地兼容移动设备</h3><p>一些手持设备比如手机，PAD等，现在还不能很好地支持AJAX。</p>
<h2 id="ajax工作原理"><a href="#AJAX工作原理" class="headerlink" title="AJAX工作原理"></a>AJAX工作原理</h2><img src="/2022/07/05/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C_AJAX/AJAX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" class title="AJAX工作原理">

<p>基于AJAX的介绍和工作原理，AJAX请求可以分为以下几个步骤：</p>
<ol>
<li>新建XHR对象, <code>let xhr = new XMLHttpRequest()</code>；</li>
<li>打开链接 <code>open()</code>，传入三个参数：请求类型，Url，请求是否异步（布尔值）</li>
<li>发送 <code>send()</code>，接收一个参数，作为请求体发出的数据，如果不需要，则必须传<code>null</code></li>
<li>当XHR对象当完成第四步（<code>onreadystatechange</code>）数据接收完成，判断http响应状态（<code>status</code>）200-300之间或者304（缓存）执行回调函数</li>
</ol>
<h3 id="1-请求类型说明"><a href="#1-请求类型说明" class="headerlink" title="1. 请求类型说明"></a>1. 请求类型说明</h3><p>[先占个位~add post后再update]</p>
<h3 id="2-状态码说明"><a href="#2-状态码说明" class="headerlink" title="2. 状态码说明"></a>2. 状态码说明</h3><p>状态码详见：[先占个位~add post后再update]</p>
<p>所以，一般来说，HTTP状态码为2xx表示成功，或者是HTTP状态码为304，表示资源未修改过，使用浏览器的缓存中拿取的，也意味着响应有效。</p>
<h3 id="3-readystate说明"><a href="#3-readyState说明" class="headerlink" title="3. readyState说明"></a>3. readyState说明</h3><ul>
<li><strong>0</strong>：未初始化（Uninitialized）。尚未调用open()方法。</li>
<li><strong>1</strong>：已发送（open）。已调用open()方法，但尚未调用send()方法。</li>
<li><strong>2</strong>：已发送（Sent）。已调用send()方法，尚未收到响应。</li>
<li><strong>3</strong>：接受中（Receiving）。已经收到部分响应。</li>
<li><strong>4</strong>：完成（Complete）。已经收到所有响应，可以使用了。</li>
</ul>
<blockquote>
<p>每次readyState的值发生改变的时候，都会触发readystatechange</p>
</blockquote>
<h3 id="4-xhr对象属性说明"><a href="#4-xhr对象属性说明" class="headerlink" title="4. xhr对象属性说明"></a>4. xhr对象属性说明</h3><blockquote>
<p>收到响应后，xhr对象的以下属性会被填充上数据</p>
</blockquote>
<ul>
<li><code>responseText</code>：作为响应体返回的文本</li>
<li><code>responseXML</code>：如果响应的内容类型是<code>text/xml</code> 或者 <code>application/xml</code>，那就是包含响应数据的XML DOM文件</li>
<li><code>status</code>：响应的HTTP状态</li>
<li><code>statusText</code>：响应的HTTP状态描述</li>
</ul>
<h2 id="ajax代码实现"><a href="#AJAX代码实现" class="headerlink" title="AJAX代码实现"></a>AJAX代码实现</h2><h3 id="1-ajax手写"><a href="#1-AJAX手写" class="headerlink" title="1. AJAX手写"></a>1. AJAX手写</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Step1: 新建XHR对象</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step4: 监听</span></span><br><span class="line">xhr.<span class="property">onreadstatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (readyState === <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;Request was unsucessful!&#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step2: 建立连接</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step3: 发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-promise封装ajax"><a href="#2-Promise封装AJAX" class="headerlink" title="2. Promise封装AJAX"></a>2. Promise封装AJAX</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAjax</span>(<span class="params">method=<span class="string">&#x27;GET&#x27;</span>, url, isAsync=<span class="literal">false</span>, data=<span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        xhr.<span class="property">onreadstatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);   <span class="comment">// 响应体返回的文本</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(xhr.<span class="property">statusText</span>);   <span class="comment">// 响应的HTTP状态描述</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">open</span>(method, url, isAsync);</span><br><span class="line">        xhr.<span class="title function_">send</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.w3schools.com/xml/ajax_intro.asp">https://www.w3schools.com/xml/ajax_intro.asp</a></p>
<p><a href="https://juejin.cn/post/6844903713102888973">https://juejin.cn/post/6844903713102888973</a></p>
<p><a href="https://segmentfault.com/a/1190000039416782">https://segmentfault.com/a/1190000039416782</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>手写原理</tag>
        <tag>计算机网络</tag>
        <tag>网络请求</tag>
      </tags>
  </entry>
  <entry>
    <title>计网 | HTTP请求方法</title>
    <url>/2022/07/07/%E8%AE%A1%E7%BD%91/%E8%AE%A1%E7%BD%91_HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">Mean</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET（获取资源）</td>
<td align="center">发送一个请求获取服务器上的某一资源，返回实体主体</td>
</tr>
<tr>
<td align="center">POST（传输实体主体）</td>
<td align="center">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）<br>数据被包含在请求体中，POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改</td>
</tr>
<tr>
<td align="center">PUT（传输文件）</td>
<td align="center">从客户端向服务器传送的数据取代指定文档的内容</td>
</tr>
<tr>
<td align="center">DELETE （删除文件）</td>
<td align="center">请求服务器删除指定页面</td>
</tr>
<tr>
<td align="center">OPTIONS （询问支持的方法）</td>
<td align="center">查询针对请求URI指定的资源支持的方法</td>
</tr>
<tr>
<td align="center">CONNECT（连接方式）</td>
<td align="center">HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器</td>
</tr>
<tr>
<td align="center">TRACE（测试诊断）</td>
<td align="center">回显服务器收到的请求，主要用于测试或诊断</td>
</tr>
<tr>
<td align="center">PATCH（局部更新）</td>
<td align="center">对已知资源的局部更新</td>
</tr>
</tbody></table>
<h4 id="get-和-post-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h4><ul>
<li><strong>请求参数</strong>：GET请求参数是通过URL传递的，多个参数以&amp;连接，POST请求放在request body中</li>
<li><strong>请求缓存</strong>：GET请求会被缓存，而POST请求不会，除非手动设置</li>
<li><strong>收藏为书签</strong>：GET请求支持，POST请求不支持</li>
<li><strong>安全性</strong>：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求</li>
<li><strong>历史记录</strong>：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留</li>
<li><strong>编码方式</strong>：GET请求只能进行url编码，而POST支持多种编码方式</li>
<li><strong>对参数的数据类型</strong>：GET只接受ASCII字符，而POST没有限制</li>
</ul>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>计网</tag>
        <tag>HTTP请求</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理 | instanceof</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_instanceof/</url>
    <content><![CDATA[<h3 id="mdn"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h3><blockquote>
<p>instanceof 运算符用于检测构造函数的prototype属性是否出现在实例对象的原型链上</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">object instancof constructor</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>object</code>：某个实例对象</p>
<p><code>constructor</code>：某个构造函数</p>
<p><strong>返回值</strong></p>
<p>布尔值</p>
<h3 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h3><p><strong>实现思路</strong>：根据原型链的思想，判断实例对象的<code>__proto__</code>是否指向构造函数的原型，一级一级向上判断，直至<code>null</code></p>
<p><strong>注意</strong>：instanceof只能用于判断引用数据类型，不能判断基本数据类型，直接返回<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceOf</span>(<span class="params">object, constructor</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> object !== <span class="string">&#x27;object&#x27;</span> || object === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> left = object.<span class="property">__proto__</span>;</span><br><span class="line">	<span class="keyword">let</span> right = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 终止条件1：找到原型了</span></span><br><span class="line">        <span class="keyword">if</span> (left === right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 终止条件2：遍历到了尽头也没找到</span></span><br><span class="line">        <span class="keyword">if</span> (left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 还没找到：继续找呗！</span></span><br><span class="line">        left = left.<span class="property">__proto__</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;KK&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(p, <span class="title class_">Person</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myInstanceOf</span>(p, <span class="title class_">Object</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_Object.create/">手写Object.create</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_new/">手写new</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
  <entry>
    <title>手写原理 | new操作符</title>
    <url>/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_new/</url>
    <content><![CDATA[<h3 id="mdn"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h3><blockquote>
<p>new运算符创建一个用户定义的对象类型的实例或者具有构造函数的内置对象的实例</p>
</blockquote>
<p><strong>语法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> constructor[([<span class="variable language_">arguments</span>])]</span><br></pre></td></tr></table></figure>

<p><strong>参数</strong></p>
<p><code>constructor</code>：一个指定对象实例的类型的类或函数</p>
<p><code>arguments</code>：一个用于被<code>constructor</code>调用的参数列表</p>
<h3 id="手写new"><a href="#手写new" class="headerlink" title="手写new"></a>手写new</h3><p><strong>new关键字会进行如下操作</strong></p>
<ol>
<li>创建一个空对象</li>
<li>为空对象添加<code>__proto__</code>，指向构造函数的<code>prototype</code>对象</li>
<li>将新对象作为<code>this</code>的上下文</li>
<li>如果该函数没有返回对象，则返回<code>this</code></li>
</ol>
<p><strong>对于返回值的说明</strong></p>
<ul>
<li>如果构造函数有返回值且是对象，则返回这个对象</li>
<li>如果构造函数有返回值且不是对象，则返回创建的空对象</li>
<li>如果构造函数没有返回值，返回创建的空对象</li>
</ul>
<p><strong>手写new</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">	<span class="keyword">let</span> constr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>([...<span class="variable language_">arguments</span>]);</span><br><span class="line">    <span class="keyword">let</span> proto = constr.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    newObj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto);</span><br><span class="line">    <span class="keyword">let</span> res = constr.<span class="title function_">apply</span>(newObj, [...<span class="variable language_">arguments</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> res === <span class="string">&#x27;object&#x27;</span> ? res : newObj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Katrina&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);   <span class="comment">// &#123;name: &#x27;Katrina&#x27;, age: 18&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Person</span>);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_instanceof/">手写instanceof</a></p>
<p><a href="https://superkatrina123.github.io/2022/07/06/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86/%E6%89%8B%E5%86%99%E5%8E%9F%E7%90%86_Object.create/">手写Object.create</a></p>
]]></content>
      <categories>
        <category>手写原理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>手写原理</tag>
      </tags>
  </entry>
</search>
